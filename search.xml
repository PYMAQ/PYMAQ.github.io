<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Web前端书单从HTML到JS到AJAX到HTTP从框架到全栈过来人帮你走更少弯路（珍藏版）]]></title>
    <url>%2F2018%2F10%2F25%2FWebFont%2F</url>
    <content type="text"><![CDATA[前言：技术书阅读方法论一.速读一遍（最好在1~2天内完成）人的大脑记忆力有限，在一天内快速看完一本书会在大脑里留下深刻印象，对于之后复习以及总结都会有特别好的作用。 对于每一章的知识，先阅读标题，弄懂大概讲的是什么主题，再去快速看一遍，不懂也没有关系，但是一定要在不懂的地方做个记号，什么记号无所谓，但是要让自己后面再看的时候有个提醒的作用，看看第二次看有没有懂了些。 二.精读一遍（在2周内看完）有了前面速读的感觉，第二次看会有慢慢深刻了思想和意识的作用，具体为什么不要问我，去问30年后的神经大脑专家，现在人类可能还没有总结出为什么大脑对记忆的完全方法论，但是，就像我们专业程序员，打代码都是先实践，然后就渐渐懂了过程，慢慢懂了原理，所以第二遍读的时候稍微慢下来，2周内搞定。记住一句话：没看完一个章节后，总结一下这个章节讲了啥。很关键。 三.实践（在整个过程中都要）实践的时候，要注意不用都去实践，最好看着书，敲下代码，把重点的内容敲一遍有个肌肉记忆就很不错了。 以及到自己做过的项目中去把每个有涉及的原理的代码，研究一遍，就可以了 前言：作为一名前端开发人员，如果你告诉我你没有看过任何关于前端的书籍，那么我完全可以认为你不是一名合格的前端开发工程师。为什么我要以“看书”来衡量合格前端的标准？因为前端作为一个特殊的极具变化与开拓性的工种，没有较强的自我学习与思考能力，很难在这激烈又纷杂的环境里存活而不被淘汰，而“看书”则是最基本的自我提升与补充知识的途径。书中自有黄金屋。不管你是想涉猎前端抑或进行系统性的学习，我都推荐大家阅读前端的相关书籍。 40+本pdf书网盘链接：链接：https://pan.baidu.com/s/1PEwnn58LZ1zfelEP14aeHw 密码：y39z备注：里面已经顺便整理压缩好，需要下载后才可以打开，网盘直接打开会显示损坏。 资源图示（下载链接如上）： 以下是每本书的推荐语，清楚自己缺的是什么，就下定决心去补吧，一个好工作意味着高收入，投资自己的时间换来更宝贵的东西。 一.HTML系列书籍从入门到进阶系列1.《HTML5 揭秘》 是知名的《HTML5:up and running》的中文译本，很详细的介绍了HTML5的最新技术，如果你经常看Dive into HTML 5这个网站，肯定很了解这本书了。 算是入门款书籍，不枯燥，技术层面一般，适合菜鸟看，好在对格局有一定见解。当然如果一丁点编程知识都没有，也需要在阅读的时候多补充一下，非常推荐。 2.《响应式Web设计:HTML5和CSS3实战》BenFrain (作者), 王永强 (译者) 全书主要是带领读者做一个小网页来写的，其实响应式的东西讲得比较少，大半内容是介绍H5和css3的基础知识。如果同时想了解H5和css3和响应式设计入门，这本书不错。 3.《疯狂HTML 5/CSS3/JavaScript讲义》 李刚 (作者) 简介：这是一本全面介绍HTML 5、CSS 3和JavaScript前端开发技术的图书，系统地介绍了HTML 5常用的元素和属性、HTML5的表单元素和属性、HTML 5的绘图支持、HTML5的多媒体支持、CSS 3的功能和用法、最前沿的变形与动画功能等。除此之外，《疯狂HTML 5/CSS 3/JavaScript讲义》还系统地介绍了JavaScript编程知识，包括JavaScript基本语法、DOM编程，以及HTML 5新增的本地存储、离线应用、JavaScript多线程、客户端通信支持、WebSocket编程等。 4.《HTML5触摸界面设计与开发》 伍兹 (StephenWoods) (作者), 覃介右 谷岳 (译者） 简介：《HTML5触摸界面设计与开发》专注于触摸界面的开发，内容的结构和优化网站的思路大概一致。上半部分涵盖了能使各类网站，特别是移动网站变快的基本概念。书的后半部分是专门讲触摸界面的，特别是尽可能地让它们更平稳和快速。本书适合具有一定经验的Web开发者阅读参考。 5.《HTML5高级程序设计》 《HTML5 高级程序设计》是《Pro HTML5 Programming》的中文译本，写的相对比较深入，如果你对HTML5有较多了解，可以选择这本书。这本书适合有丰富编程经验的Web应用开发者。书中没有互联网发展基础知识的介绍。但是书中有许多现成的资源可以加快学习Web编程原理。当然，对于程序的的书跟平常的名著还不一样，因为自身经验不同，看法不同，需求不同，对于书的评价也不同。 二.CSS系列书籍从入门都进阶系列1.《HTML &amp; CSS设计与构建网站》 此书让我们知道，网页语言的书不只有呆板与枯燥，也可以赏心悦目，舒适的色彩搭配，恰到好处的图文编排！连插图都那么舒服。 除了书的装订不好以外（出版社为了赚钱呀，太耐糙了销量就小了），内容牛逼！给我们查漏补缺做工具书再适合不过了，介绍了新的HTML 5和CSS 3还有网站的设计以及网站的优化，虽然不多，也涉猎到了，更新很快，要知道，互联网的发展是一日千里。 如果没猜错，我估计作者是个MM，哈哈哈。 2.《CSS权威指南 （第3版）》 2000年时候的书，本来以为内容会比较旧，读了才发现内容全、系统，比现在网上各种版本的css教程之类要好的多，事实上好多都是从这本书摘出来的Eric A.Meyer，牛人，书里关于css的教程语言表述很清楚，章节合理，主要讲css1及css2中的布局、定位值得看，以前想看，正好在学校的图书馆找到，看完说不定买本放着，的确不错。 3.《精通CSS（第2版）-高级Web标准解决方案》 本书汇集了最有用的CSS技术，介绍了CSS的基本概念和最佳实践，结合实例探讨了图像、链接和列表的操纵，还有表单设计、数据表格设计、纯CSS布局等核心CSS技术。 4.《Eric Meyer 谈 CSS(卷2)》 这本书已一个又一个项目为基础，详细的展示了如何书写规范的样式，文章末尾已一个CSS禅意花园的项目为结尾，并告诉制作者，要做到纯粹的样式与结构相分离式不可能的。 推荐页面制作者阅读者本经典之作。 5.《CSS禅意花园》 第一次看有点糊里糊涂的，所以有些方面理解的模模糊糊。在这次看的过程中慢慢的理解了作者的一些意图，属于越看越有感觉的一本书。类似读中国古诗一样，越读越有兴趣，对自己网站页面的架构有很深的推动。 三.JavaScript从入门到进阶系列就是有一定的基础(比如最常见的HTML标签及其属性、事件、方法；最常见的CSS属性；基础的JavaScript编程能力)，能够完成一些简单的WEB前端需求。 1.推荐：《JavaScript Dom编程艺术》 理由：此书绝对是入门的好书，本人也是在接触JS一段时间后才看的这本书。此书从JS的历史 – JS基础语法知识 – DOM介绍和简单的使用。现在这本书已经出了第二版，需要的朋友直接第二版就行。 评价：简洁，实用，详细，易懂，书不厚，相信很快就能看完。 算是很好的经典入门书了，贯穿一个实例，把JavaScript的优点表现的淋漓尽致，非常强大。 2.推荐：《JavaScript权威指南(第5版)》 理由：非常强大(这名字可不是白起)，其实说起来也惭愧，本人至今都没有买过这本书，最开始是因为 这个书实在是小贵，只好借朋友的看，不过也就看了个周末。网上关于此书的评价很多，意思大概都是说这书就是一个JS的文档手册，如果你有闲钱，并且习惯翻 书查询，那么就来一本吧。顺便提醒一句，这本书的第六版英文版已经出来了。 本人以前的DEV leader兼恩师这么说过：“初级开发人员的标志就是需要在中级和高级开发的指导下完成工作”。首先不要苛责代码的对错严谨，毕竟每个程序员都有这样的一个过程，就是这个级别的特征。 3.推荐：《JavaScript高级程序设计》(第三版) 理由：这本书的作者是 Nicholas C.Zakas ,博客地址是 http://www.nczonline.net/ ,大家可以去多关注，雅虎的前端工程师，是YUI的代码贡献者，可想而知这本书得含金量，他出的书都广受好评。这本书已经出了第二版，而且与第一版相比内 容更新很大，直接第二版就行。不要被书名的“高级”唬住，只要有JS基础语法知识和DOM基础知识就行，而且本书开始阶段还是介绍JS和DOM的语法知 识。有一定JavaScript的基础可以看看，不过没基础也可以看看，wrox经典书籍。 评论：重点推荐一下第五章(类型),第六章(OOP),第七章(匿名),多看几遍,至少要完全看明白，能为以后进阶打好基础，个人感觉这几章是本书的 精华所在。这本书在入门的时候看节奏会快了一些，所以不建议初学者看，可是相对于我一会要介绍的书又算基础一点，所以建议先阅读完这本书，对浏览器兼容和 语法知识有一定了解之后再往下阅读。 4.推荐：《高性能JavaScript》《JavaScript语言精髓与编程实践》 理由：本人先看的是《高性能JS》，这本书还是 Nicholas C.Zakas 所著，经典之作，书中大量举例了各种不同写法的JavaScript在浏览器中的性能情况，对规范JavaScript代码和提升性能有很好的帮助，最后 提到了很多工具和性能测试的方法，都是灰常灰常有实际作用的，看得出作者很厚道(好吧,偶承认了,偶是他的粉丝)^_^,记忆最深的一句话:”如果 JavaScript 执行了几秒钟,那么很可能是你做错了什么”;《语言精髓》和《高性能》有少部分关键知识都重复提到了，可是为什么要推荐这本书，因为本书对JS语言本质的描述太棒了，这是一本介绍 JavaScript语言本质的权威书籍，从 “对象”，“函数”，“继承”，“数组”等等多个重要知识着手。我补一句话 – 本书需要反复阅读。 评论：都是好书，都很薄，而且所说的内容只要有基础都不难。相信读完之后会对JS又有新的认识，且对以后的代码规范和浏览器差异性等高级问题有了新的认识，如果读完之后会有种被灌顶的感觉，那么恭喜你，你离中级不远了。作为Orelly唯一一本我确实认可的javascript相关的书。 他摒弃了Orelly系列所有我不喜欢的特点：老外的聊天说教式阅读体验，样例不够丰富，排版单一，破事水等。他的优点如下： 情景丰富，基本涉及所有js性能优化的场景。还会给出不同场景的实际测试数据，真实可信。我们在阅读这些场景实例的同时也丰富了自己js的使用经验。 给出了很多看似”旁门左道”的解决方案，而这些冷门的解决方案恰恰是有些人死活百度不到的真正能解决问题的最优解。 在说问题的同时说原理，深入浅出，游刃有余。所以这本书不仅仅是一本介绍js性能相关的书，而是一本涉及浏览器原理，js解析原理，用户体验等知识的javascript最佳注解。阅读建议：建议和高程三一起看，可以算是高程三阅读的最佳伴侣。高程三告诉你“他叫什么，他什么样”，这本书就告诉你“他为什么”，“他该怎样”。所以，当别人还在为某些问题绞尽脑汁的时候，你已经从起点上干翻他们了。 5.推荐：《深入浅出JavaScript》 理由：Ajax程序员必备 里面讲自己开发的一个JavaScript框架。 6. 推荐《学习Javascript数据结构与算法》 理由：这本书相对是一本冷门书。为什么我会推荐他，是因为他能解决每个半路出家的js程序员都曾思考过的一些问题： 我们的数组Array这么强大，要栈Stack，队列Queue这些功能少，半半拉拉的东西干什么呢？ 我们学的数据结构搞来搞去好像也就那些玩意，为什么被大家这么推崇，还要分门别类讨论呢？所以这本书只是为何告诉你上面这些问题的答案： 栈和队列本来就没有Array功能强。没有Stack和Queue类只是因为ES5不去实现它而已。作为一种相互之间存在一种或多种特定关系的数据集合，其存在意义是不应该被其功能强大与否来决定的。 数据结构和编程语言无关。语言死了，他们会在下一门语言里重生。哪怕计算机死了，他们都会在下一个概念体里重生。阅读建议：跟着书本把这里面的结构全部敲一遍，快的话一天就能搞定。从此你便再不怕惧怕js相关的简单数据结构问题。但是，遇上高级的树，图等问题该跪还是要跪。因为这本书虎头蛇尾，后面的高级点的数据结构介绍的不够深。适合经常反思“它从哪里来，要到哪里去？”的js程序员，或后悔以前数据结构没好好学的前端同学。还是本人以前的DEV leader兼恩师这么说过：“中级开发人员的标志就是在高级开发或架构师较少的指导下高质量的完成工作，并对产品或项目有自己的想法与理解”。 7.强烈推荐：《JavaScript DOM高级程序设计》 理由：此书灰常犀利，本人一共看了近半年的时间，已反复阅读多次。说实话，这本书的翻译一般，代码也有少许错误，可是这不影响这本书的强大，通过学习 本书，可以理解一个JS的库如何产生，自己动手写一个简单的自己的JS库，如果你打算研究其他的JS库或者正在研究其他的JS库，那么这本书会使你的理解 达到新的高度，进阶高级必读，写库必读。 评论：异常强大的一本JS巨作，此书不薄，强烈推荐。 8.强烈推荐：《JavaScript设计模式与开发实践》 理由：我认为腾讯AlloyTeam的这本书对我帮助媲美高程三。那时候我恰好换公司，从原来的开发方式切换成另一种完全不同的开发方式，让我很不适应。这本书及时的蹦出来，他拿实际的应用场景举例，告诉你不同js项目里如何共通设计模式，还极其详细的介绍了函数的高级用法，能让你对js高阶函数的认知上升一个台阶。难能可贵的是他还拿java作为静态语言的类比。从语言统一高度来给你分析这些问题。和上本介绍数据结构的书一样，这本书有的放矢，能完美的解决对js设计模式有疑问的同学的实际问题。他比上本书更深刻，更易读，也更贴近实践。评论：书不厚，可真的是内容丰富且高深，强烈建议购买。 阅读建议： 这是本适合反复阅读的书籍。 如果你的思路能根据应用场景自动切换到最适合的设计模式，说明你已吃透这本书了。 9.推荐：《高性能网站建设指南》《高性能网站建设进阶指南》 理由：在读完前几本书之后我们对前端的性能和自己的代码的效率已经达到相当的高度了，然后我们在接触一些前端工程师的一些精髓。本书对HTTP请求，CDN，内容缓存和一些web开发中常见问题进行讲解。 评论：书都不厚，可是说的都是比较实用的东西，可是用不用的上还得看个人和项目需要了。 10.推荐：《精通JavaScript》 理由：把JavaScript讲得很面向对象。很现代！ 图灵教育的出版引进书籍有很多都是经典书籍，非常好。 11. 推荐：《你不知道的JavaScript》 大名鼎鼎的Github开源的书籍。为了他的名气我也得买一本实体书来拜读下。这本是上卷，只涉及作用域和闭包，this和对象原型两部分。不过其深入程度是其他js书籍难以企及的。可以说，这已经是大部分前端程序员对js语法可以深入了解的最底层了，再往下就直面编译原理了。阅读建议：用于提升自己的js语法的理解等级。对于进入工作第二年的想深入理解js语法的同学来说特别有效。 四.HTTP网络系列从入门到进阶系列1.《图解HTTP和图解TCP/IP》 相较于前两本大厚书，这两本书更加亲民，小白可以买来看看，还是很适合入门的。 2.《计算机网络：自顶向下》 这本从应用层讲到物理层，感觉这种方式学起来更轻松，我比较推荐小白看这本。 3.《HTTP权威指南》 内容全面，涉及http及其周边方方面面，http前世今生，http响应机制，http连接过程，http安全认证，http编码，http页面上传等等。读完对http有一个全面的认识，尤其是最近回头重读了安全部分内容，感觉收获不小：cookie有两个版本，由服务器set，在客户端每次请求时附加，作为认证/追踪凭证，cookie可配置限期和作用域；帐号认证有base64方式和hash方式，都存在安全隐患；https是王道，https = ssl + http。 五.AJAX系列从入门到进阶推荐1.《Ajax基础教程》（亚马逊计算机榜首图书，国内第1本Ajax图书） （美）阿斯利森，（美）舒塔 著，金灵 AJAX必备图书之一、国内发行的第一本AJAX图书，也是目前最好的AJAX入门书，如果是AJAX新手，此书是最好的入门图书。本书基本包括了实现Ajax需要了解的大部分技术与工具，让您在一开始就对AJAX就有一个整体把握与全局观念。 2.《Ajax实战》（Ajax in action中文版） AJAX必备的图书之二：人称“AJAX圣经”，AJAX的进阶最佳。特点就是足够深入，仅此一点，已经足够。 进阶看着一本能看懂就相当不错了。 六.vue.js从入门到进阶系列1.《vue.js权威指南》 一般，入门看看就好。其中有部分是引用网上的，有点坑，看看电子版，对vue.js提升还是有点帮助的。大佬就不推荐了。 2.《vue.js实战》 由雨溪大佬的书，前端人不看会后悔的，特别是Vue.js这系列。 七.正则表达式系列1.《正则表达式必知必会》 在该书的序言中作者已经提到过一些 大部头的正则表达式的书，而且作者也声明了：该书比较适合那些不太了解正则表达式而又想尽快入门能够解决一些实践中遇到的小问题的朋友们。我最近在看这本书，因为以前有一点半点的学习过正则表达式，感觉正则表达式语法虽然不算难，但是要真正用好还是有点难度的。需要大量的实践经验。这本书的正文内容大概十章左右，前五章都算一些基础知识，也是我以前就知道的，后面的几章也许你也知道，但是个人认为算是一些稍微高级点的内容。所以我想，如果你还不怎么精通正则表达式，在工作中使用起来比较费力的话，这本书倒也挺适合的。查漏补缺吧。学前端都适合看看。 2.《精通正则表达式》 我强烈推荐这本书，我看了之后对其的运行过程有了深入地了解，现在对一般的问题，运行的效率都有一定的提高。这个本买来很长时间了 感觉太厚 就一直没有看，这点时间突然对正则表达式感兴趣了 就看了 前几张的内容很值得看 尤其是中间几章，我是彻底了解了正则的工作原理 以前工作中出现的一些情况原来想不明白，现在也就觉得应该是这样子了 建议大家静下心来看这本书。 总结：天下没有不劳而获的果实，望各位年轻的朋友，想学技术的朋友，在决心扎入技术道路的路上披荆斩棘，把书弄懂了，再去敲代码，把原理弄懂了，再去实践，将会带给你的人生，你的工作，你的未来一个美梦。 一.HTML系列书籍从入门到进阶系列1.《HTML5 揭秘》2.《响应式Web设计:HTML5和CSS3实战》3.《疯狂HTML 5/CSS3/JavaScript讲义》 4.《HTML5触摸界面设计与开发》 5.《HTML5高级程序设计》二.CSS系列书籍从入门都进阶系列1.《HTML &amp; CSS设计与构建网站》2.《CSS权威指南 （第3版）》3.《精通CSS（第2版）-高级Web标准解决方案》4.《Eric Meyer 谈 CSS(卷2)》5.《CSS禅意花园》三.JavaScript从入门到进阶系列1.《JavaScript Dom编程艺术》2.《JavaScript权威指南(第5版)》3.《JavaScript高级程序设计》(第三版)4.《高性能JavaScript》《JavaScript语言精髓与编程实践》5.《深入浅出JavaScript》6.《学习Javascript数据结构与算法》7.《JavaScript DOM高级程序设计》8.《JavaScript设计模式与开发实践》9.《高性能网站建设指南》《高性能网站建设进阶指南》10.《精通JavaScript》11.《你不知道的JavaScript》四.HTTP网络系列从入门到进阶系列1.《图解HTTP和图解TCP/IP》2.《计算机网络：自顶向下》3.《HTTP权威指南》五.AJAX系列从入门到进阶推荐1.《Ajax基础教程》（亚马逊计算机榜首图书，国内第1本Ajax图书）2.《Ajax实战》（Ajax in action中文版）六.vue.js从入门到进阶系列1.《vue.js权威指南》2.《vue.js实战》七.正则表达式系列1.《正则表达式必知必会》2.《精通正则表达式》 40+本pdf书网盘链接：链接：https://pan.baidu.com/s/1PEwnn58LZ1zfelEP14aeHw 密码：y39z备注：里面已经顺便整理压缩好，需要下载后才可以打开，网盘直接打开会显示损坏。 附java从入门SE到进阶EE推荐书籍50+本：https://pymlovelyq.github.io/2018/10/06/java/]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>前端</tag>
        <tag>HTML</tag>
        <tag>CSS</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[C语言推荐书籍从入门到进阶带你走上大牛之路（珍藏版）]]></title>
    <url>%2F2018%2F10%2F24%2FCC%2F</url>
    <content type="text"><![CDATA[前言：技术书阅读方法论一.速读一遍（最好在1~2天内完成）人的大脑记忆力有限，在一天内快速看完一本书会在大脑里留下深刻印象，对于之后复习以及总结都会有特别好的作用。 对于每一章的知识，先阅读标题，弄懂大概讲的是什么主题，再去快速看一遍，不懂也没有关系，但是一定要在不懂的地方做个记号，什么记号无所谓，但是要让自己后面再看的时候有个提醒的作用，看看第二次看有没有懂了些。 二.精读一遍（在2周内看完）有了前面速读的感觉，第二次看会有慢慢深刻了思想和意识的作用，具体为什么不要问我，去问30年后的神经大脑专家，现在人类可能还没有总结出为什么大脑对记忆的完全方法论，但是，就像我们专业程序员，打代码都是先实践，然后就渐渐懂了过程，慢慢懂了原理，所以第二遍读的时候稍微慢下来，2周内搞定。记住一句话：没看完一个章节后，总结一下这个章节讲了啥。很关键。 三.实践（在整个过程中都要）实践的时候，要注意不用都去实践，最好看着书，敲下代码，把重点的内容敲一遍有个肌肉记忆就很不错了。 以及到自己做过的项目中去把每个有涉及的原理的代码，研究一遍，就可以了 一共四个系列整整32本电子书，找了好久终于齐了，如果都能看完看懂且科学的总结外加合理的实践，相信未来你的技术路会更好走，当然阿里巴巴，腾讯，阿里这些的Offer不将是梦，除了多看点技术书，你觉得还有什么能拿出来和985,211的朋友比呢？最后 附上这32本书的电子版链接： 百度网盘链接：https://pan.baidu.com/s/1iYJ6Db8PSb1VsAmMWJ_uDg密码：hcx7备注：里面已经顺便整理压缩好，需要下载后才可以打开，网盘直接打开可能会显示损坏。 资源图示（下载链接如上）： 以下是每本书的推荐语，清楚自己缺的是什么，就下定决心去补吧，一个好工作意味着高收入，投资自己的时间换来更宝贵的东西。 一.C语言入门，初学，编程基础系列1.《C语言程序设计：现代方法》（第2版） 推荐理由：时至今日， C语言仍然是计算机领域的通用语言之一，但今天的 C语言已经和最初的时候大不相同了。本书最主要的一个目的就是通过一种“现代方法”来介绍 C语言，书中强调标准 C，强调软件工程，不再强调“手工优化”。这一版中紧密结合了 C99标准，并与 C89标准进行对照，补充了 C99中的最新特性。本书分为 C语言的基础特性、 C语言的高级特性、 C语言标准库和参考资料 4个部分。每章末尾都有一个“问与答”小节给出一系列与该章内容相关的问题及答案，此外还包含适量的习题。本书是为大学本科阶段的 C语言课程编写的教材，同时也非常适合作为其他课程的辅助用书。 2.《C语言程序设计》（第2版）谭浩强版本 这本书堪称经典之作初学者学习可以看看，这个就是零基础入门学习C语言的，上手快。但也要坚持上机，要是只看书，不在电脑上运行一下看看，是永远学不会的。关键在实践！坚持！ 不过这本书被诟病的地方也不少，可以看完上面那本再看这本，很多东西就懂了。 3.《程序员修炼之道》 《程序员修炼之道》由一系列的独立的部分组成，涵盖的主题从个人责任、职业发展，直到用于使代码保持灵活、并且易于改编和复用的各种架构技术。利用许多富有娱乐性的奇闻轶事、有思想性的例子以及有趣的类比，全面阐释了软件开发的许多不同方面的最佳实践和重大陷阱。无论你是初学者，是有经验的程序员，还是软件项目经理，本书都适合你阅3读。 4.《C和指针》 看到书名很让人担心翻译的英语水平。实际不然，翻译的很好。只能说标题党了。看封面不难理解作者用pointers的意思吧，再说了书又不是只讲指针。书名用《C语言指导》更好些，这是一本全面的C语言入门书。当然入门的深度和高度都比国内的教材高太多了。所以，如果你能直接从这本书开始学的话，起点会比较高，当然能学懂的话，说明你很有才。一般情况下，本书的部分内容更适合有C基础的人看。如ADT、递归、指针和数组的部分，书中所述的思想是国内教材所缺乏的。看完本书，能得到一个正确的C语言观。 5.《C primer plus》（入门首选） C prime Plus这本书看了两遍，练习题基本上都自己独立做完了。题目没怎么主动算法能力（毕竟不是算法的书），但是每个细节说的很清楚。初学者很容易找到信心的。学完c primer plus之后可以来看上面谭大爷的书找错误。 6.《高质量程序设计指南》（一定要看） 大一上学期的时候，一个偶然的机会接触了本书的第一版，引发了对软件工程的思考，让我很早就意识到代码规范的重要性，为今后学习打下了坚实基础，真的很感激这本书，虽然其内容都很简单，但是在我迷茫的时候真的给了我很多启迪。 7.《C/C++深层探索》 很早读过的书，很不错，姚的另外一本c标准：标准和实现也非常好。原创佳作~~语言的扩充成为C++，我们知道C语言是一种程式语言，而C++则为对象化语言，因此C++比C更加接近人类的语言，因此第四代语言就是人类语言，这就是说人类也是按照程式来行动的，也是一种程式动物或者程式生物。人类根据一定的世界的部分而创造的语言本不与世界一致或者总一致，因此才有扩充，但是基本词汇只有这么多，因此没办法表述所有的事物，因此不得不将词汇表扩充至一切声响，这就是音乐的美丽，音乐就是现代语言的最终发展。可见音乐的重要性。 8.《从问题到程序》（最佳高校教材） 既适合初入门到的小子，也适合相见恨晚的匹夫.这里不得不赞一下老裘借鉴得好,而且里面又简略提到不少CS里面的概念:讲单词计数的时候顺带介绍了有限状态机;程序设计语言里的副作用,前条件,后条件,短路求值.习题也是很不错的,高斯消元,3n+1问题,约瑟夫环,实现一个简单”虚拟机”和”汇编器”还要弄单步执行功能不少open problem.风格严谨,十分强调程序的强健和安全,测试.越界访问从头到尾都在强调,后面还自己实现了个通用整数输入检查函数,还有通用错误信息处理函数,错误处理讨论得很详细.代码简练,命名规范.老早就讲了函数,”强调通过函数抽象建立清晰结构的重要性”.提供大量的模式,实例和建议,教会初学者设计、权衡.内容不依赖任何具体C实现,讨论IDE好处和坏处.作为第一本C语言是很合适的. 二.内核/驱动系列1.《Linux C编程一站式学习》 此书内容涵盖极广：C的基本语法，简单的数据结构，C与汇编的联系，计算机系统结构，操作系统，正则表达式，TCP/IP，无所不包。如此一来似乎样样通而样样不精。其实不是这么回事。作者内容穿插得非常好，用十分简单的方式把每个方面最重要的东西阐明了。所以，其实这是本入门书，当然也适合各个方面都了解之后总结用。看完这本书可能觉得什么都懂一点但什么都不完全会，不要紧，后面的参考文献多数都是经典。入门书嘛，但求上手快。这本书上手就非常快。里面几乎一事一例，不多不少，恰到好处。而且例子基本都简单小巧可爱，不会的地方复制代码调试即可。“我本来就是菜鸟一个，怎么了？国内这破环境，真正的大家才不稀罕写书，都捞钱去了。”其实中文书水平普遍低下，主要就是缺少宋劲杉老师这样的“菜鸟”。本书适合做零基础的初学者学习C语言的第一本教材，帮助读者打下牢固的基础。有一定的编程经验但知识体系不够完整的读者也可以对照本书查缺补漏，从而更深入地理解程序的工作原理。本书最初是为北京亚嵌教育研究中心的嵌入式Linux系统工程师就业班课程量身定做的教材之一，也适合作为高等院校程序设计基础课程的教材。本书对于C语言的语法介绍得非常全面，对C99标准做了很多解读，因此也可以作为一本精简的C语言语法参考书。 2.《Linux内核设计与实现》（第3版） 这书估计慕名而来的人都会在第一时间略感失望，首先书很薄，而且讲解不求深入。如果一个人在第一次翻阅此书的时候有这样的印象，那应该好好反省下自己是否太浮躁了。其实这部书的定位有点不高不低，但也正因如此，它是最适合过渡阶段的内核学习者阅读的一部书。正确的阅读顺序或许应是这样的：恐龙书or现代OS-&gt;LDK-&gt;情景分析之类的详解书。LDK很适合在你系统地学习了OS理论之后，直接看代码详解又觉得暂且还不够功力的学习者，它可以带你由理论学习阶段逐渐过渡到实践阶段。对于这样一部书，要是太厚就有点骗钱的嫌疑，要是太深入又会让人觉得作者故意显摆自己的学识。LDK算得上是恰到好处。另外，本书后面的参考文献十分值得一读，要是您读完本书之后觉得不错，建议把它推荐的参考文献也找来读一读，或许会让您有更惊艳的感受。 3.《Linux设备驱动程序》（第3版） 适合中低水平的人。Linux 设备驱动模型真心复杂！对于写Linux驱动的人来说, 这本书应该是教科书级别的吧, 必读. 4.《深入Linux内核架构》 觉得是linux内核的一大作，坊间关于《深入理解linux内核》的传说，本人用自己的拙学是这么理解的。对于可以有较好的英文阅读能力的人，可以不用看毛德操的老师的书，后者已经完全可以替代了。注意现在比较的逻辑，并没有拿这本书去调戏《深入理解》，毕竟本人认为本书阅读时间该是有操作系统概念，然后还没有深入代码研究的阶段。所以同样还在摸索的你我，不要被本书的页数给吓到了，这本书我每天晚上花了3个小时，差不多花了45天阅读完，建议一口气看完，不然就打不到效果了，当然如果你是在校学生，我建议花一个学期对着源码研究。现在这本书也已经被我成功推荐到我们的team了… 三.应用系列1.《UNIX环境高级编程》 好书的妙处之一，就是能给你与作者交流的感觉。技术书籍常犯两个毛病，一个是着眼点太低，堆砌细节（比如谭浩强的《C程序设计》），读起来好像听和尚念经，无法交流。再一个就是着眼点太高，兜售哲学（比如ESR的《The Art of UNIX Programming》），读起来好像听于丹老师讲论语，不敢交流。此书的经典性就在于不高不低不多不少，把UNIX系统编程的来龙去脉向你娓娓道来。很多地方都可以让你感觉到，你的疑惑作者在写书的时候已经了如指掌。从疑惑到顿悟的那一瞬间的畅快感是学习最大的快乐。所以，我们的口号就是：有问题，找APUE。 2.《UNIX网络编程》 还是在大二就买了这本书，但一直没拿起来看，各种拖延。了解 linux 下的网络编程，这本很赞。其中讲到了较为底层的网络编程系统调用和几种网络通信模式，譬如阻塞式，非阻塞式，I/O 多路复用等。但离实践还是由于一定的距离，网络编程中重点不在于系统调用，而是对具体的项目想要设计与之适应的网络模式。W.Richard Stevens 爹爹的书，每本都可以是经典。荐！ 四.高能来袭，C语言进阶系列（学完就等着封神吧王者归来BAT等你）1.《C陷阱与缺陷》 这是一本小册子，有让人继续读下去的欲望，倒不是因为页数少好欺负，是因为书中所说的几乎所有需要注意的地方作为一个程序员都有可能遇到，作者叙述起来很有意思，丝毫没有说教的感觉，举的例子很简单却一针见血。此书作为一本常备读物是非常合适的，没事经常翻翻加深印象。 2.《C专家编程》 一年前我翻了翻这本书就觉得很棒，但那是我并不“主修”C，也没好好看，最近在认真读这本书，真是赞叹不已。它使你对C的使用有深入了解，最后还介绍了一些C++，如果你以前没太多接触过C++，只知道C，通过这本书打开通往C++之门也不错。书中还提到了一些当年那些传说中Hacker的的故事，挺风趣的。但是看这本书还是要有些背景的。你要学过编译原理，虽然不需要学的太深太好，但至少对里面的一些概念要有所了解，否则对里面内存分配的部分（事实上很多是针对编译器的），你会感到吃力。还有，你要有些Unix/Linux的文化背景，比如Unix的C编程风格，还有Unix里的一些命令，工具。 3.《C语言程序设计》K&amp;R版 拿到这本薄薄的书，很多人开始怀疑，C语言是这么几百页能讲清楚的么。看完这本书，我想答案已经很明了，却真的让人感到震憾。什么是好书？无法删减的书才是真正的好书。K&amp;R的书一如C语言的设计理念：简单而高效里面的习题建议都认真做一遍，而且是在linux下用vi来做，用makefile来编译，用shell脚本来进行测试，本来第八章的题就是和linux相关的计算机的大学生们不应只会在WINDOWS下用VC来编程，而都应该在linux环境下进行程序设计，因为linux本身就是为开发者准备的操作系统 4.《C语言解惑》 本书脱胎于作者在C语言的摇篮——贝尔实验室教授C语言的讲稿，几乎涵盖了C语言各个方面的难点，并包含了一些其他书籍很少分析到的问题。在每个谜题后面都有详尽的解题分析，使读者能够清晰地把握C语言的构造与含义，学会处理许多常见的限制和陷阱，是一本绝佳的C语言练习册。 5.《你必须知道的495个C语言问题》 但比教材经典，最好手边一本教材，一边翻，一边看本书。建议集中时间看，然后再重新复习！很实用的书，比c语言陷阱，c语言解惑要深刻！！！广度还行，深度不足，适合查缺补漏。 6.《C语言参考手册(原书第5版)》 这是C99确定发布后出版的参考手册。相比K&amp;R要更加接近现在。K&amp;R适合入门，而这本书不读，恐怕不算”学过C语言“。 7.《C语言接口与实现》 另外，就我个人感觉而言，这本书的语言属于那种简单准确的风格，与原文的语义一致性很高，基本上没有因炫耀文字而牺牲准确性之处。新手当做兴趣书看或者老手老复习下也可以。可以加深对ADT的理解。 8.《深入理解计算机系统》（修订版或第3版）这本书是引导你如何练内功的，但是要是我来说的话，我个人认为这本书是在你学完数据结构和导论之间去看，因为这本书只是让你去深入理解计算机导论里面的一些概念，算是高配版本的计算机导论，目的是为了引出来操作系统、组成原理这些专业核心的课程。你要是指望看完这本书你就能左手写个App右手写个Web动态网站的话就错了，这本书的意义正在于他的这个英文版的名字，Computer System — A Programmer’s Perspective，一个程序员的修养，如何利用计算机的工作流程去优化自己写的东西这个才是这本书的目的。 10.《C语言的科学和艺术》 本书的作者因为对本科生的教育做出了杰出的贡献而获得了Bing Award奖，而这本书也正体现了他作为一名教师，深入浅出的教学方法和易于理解又引人入胜的行文风格。 文中所用的例子也都非常符合本节所要讲述的内容，并且把不得以而用到的以后章节的知识以一种genlib库的形式封装了起来，隐藏了C的复杂性，从而避免了初学者的困惑。这样，在读完本书后，会发现，我们不仅仅学到了C的知识，而且把库的编写方法、习惯都潜移默化的留在了心中。在书中很多地方都会有作者关于软件工程和优秀程序设计风格的见解，如接口的编写等等，都对我们打下扎实基础起到了积极的作用。 特别需要指出的一点是：这本书对于C语言中比较困难的部分：如指针、C风格字符串、数组和指针的关系、数组和字符串的关系，都有“一针见血”式的透彻分析，使初学者能够容易的明白其中的知识，也使有经验的读者能够抓住重点理解更加深入。对于这些比较精髓的知识，特别是指针和数组名的区别，会在文中多次被提醒：分配内存、左值！ 初学者在编程中，很少接触文件的操作，但是文件操作非常重要，无论初学者还是有一定经验的读者都应该对C标准库中的文件函数熟练的掌握，这本书对文件的介绍会让你有系统理解，而且对使用这些函数时常会犯的错误有先知一般的预见，从而避免了初学者遇到问题调试时的辛苦周折。 如果非要说说这本书的缺点，我想就是，没有把genlib库的代码刻成cd附在书里，这多少会给初学者上机调试造成了不便，好在网上有这本书中的源代码和其他资源，而且书后也有完整的代码。其实换种思路想，这也可以算是一件好事，国内学生的动手能力差，那就应该在敲代码的同时把她理解了吧，呵呵，有点自虐倾向-_-b 最后，无论如何，如果你想学习C语言，那么看看这本书吧，她很好的！（而且不必在乎什么“C语言已死”这样的胡说八道）作为一种应用最广的面向过程的语言，她会让你对计算机程序设计形成一种必要的经典的思考模式！ 11.《数据结构与算法分析C语言系列》 因为最近需要复习数据结构与算法，所以网上搜索了下这方面的经典书籍。这本书的C语言版本高居榜首，获得一致好评，正好该书又有Java语言的版本，就买来拜读一下。前后大概花了1个月的时间将该书看了两遍，书中的主要数据结构都敲代码实现了一遍，现在算是将以前的数据结构课程都回忆了起来，对比当时上学用的谭浩强的那本数据结构教程，真是天壤之别。有时间的话可以在这本书的基础上看一下&lt;&lt;算法导论&gt;&gt;。 这本书确实是很好的数据结构与算法分析的最佳入门教程，不过看这本书还是要有点数据结构的基础。通过Java语言描述，讨论了主要的数据结构：表、栈、队列、树、散列、优先队列、不相交集合和图；同时讨论了经典的排序算法：插入排序、希尔排序、堆排序、归并排序、快速排序；介绍了5种常用算法：贪婪算法、分治算法、动态规划、随机化算法、回溯算法；并讨论了Java Collection中相关数据结构的实现：ArrayList、LinkedList、TreeSet、TreeMap、HashSet、HashMap、PriorityQueue。 12.《Linux程序设计》 《Linux程序设计》是我的Linux编程入门书籍，也是做为教材使用了一整个学期，在阅读和学习这本书的时候产生了很多的疑问，书里也没有对应的解答，直到……直到我看了APUE，带着这些问题去学习APUE，产生了巨大的能量。总之，推荐这本书，但是这本书也只是入门书籍，站在《Linux程序设计》的肩膀上，学习APUE，在Linux的世界里遨游吧！ 13.《现代编译原理》 翻了这么多本书，这是我看过的唯一一本讲具体怎么构建一个编译器的书。同时这本书所构建的编译器就像作者说的那样，简单但是并不平庸，拥有很多挺先进的特性。也能算是一个优化编译器。 但是要跟着这本书做下来还是有一定难度的，需要扎实的C语言功底。 14.《重构-改善既有代码的设计》 大师Martin Fowler的经验之谈，看后有种醍醐灌顶、欲罢不能的感觉。重构也是当今敏捷开发一项不可或缺的技艺，建议所有有设计和项目开发经验的开发者都应读一下。 15.《老码识途-从机器码到框架的系统观逆向修炼之路》 我们《软件开发环境》老师写的书，先教你通过反汇编来分析、修改、自己写底层机器码，后面着重探讨面向对象特性在底层的实现和体现。 知识点都是底层的干货，对理解高层封装出来的一些概念的本质灰常有帮助。比如指针本质上就是个4字节的地址，指针类型只是由编译器识别，然后体现在控制访问多少个字节的CPU指令上； 比如函数是怎么实现调用、传参、返回的，传参又有寄存器传值、压栈传值、压栈传地址等方式，跨语言调用函数时调用惯例的协调。 总之弄懂了这些底层的机制，对高层语言的理解会透彻很多。不过最好有一点汇编基础再读，否则略艰涩。另一个特点是全书一直贯彻一种”猜测——实证”的思想，跟作者交流过这本书好几次，感觉这种思想是他最想传达的东西。 16.《C语言进阶》 这本书应该适用于学过C，但是想温习一下的人。里面有一部分基础语法，但是也有很多高级的东西。函数指针与指针函数，指针数组与数组指针，预定义，预编译，调试之类。但是感觉最后一章的常用算法有种多余的感觉。如果想应付面试，看这本书应该也没有错，里面有很多笔试喜欢考的sizeof的东西。 17.《实用C语言编程》 很老的一本C语言书,可以说是我的C语言启蒙书,里面的资料,尤其是附录是我现在还经常翻阅的原因,书写的很朴实,也如书名,确实实用,易懂.把这本书吃透了,找个工作,那是再容易不过了,所以说一本好书需要时间来检验它,在岁月中沉淀下来…岁月检验过的好书，不解释。 总结：天下没有不劳而获的果实，望各位年轻的朋友，想学技术的朋友，在决心扎入技术道路的路上披荆斩棘，把书弄懂了，再去敲代码，把原理弄懂了，再去实践，将会带给你的人生，你的工作，你的未来一个美梦。 百度网盘链接：https://pan.baidu.com/s/1iYJ6Db8PSb1VsAmMWJ_uDg密码：hcx7备注：里面已经顺便整理压缩好，需要下载后才可以打开，网盘直接打开可能会显示损坏。 附java从入门SE到进阶EE推荐书籍50+本：https://pymlovelyq.github.io/2018/10/06/java/]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>面试</tag>
        <tag>C语言</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[算法与数据结构+一点点ACM从入门到进阶吐血整理推荐书单（珍藏版）]]></title>
    <url>%2F2018%2F10%2F22%2FAlgorithm%2F</url>
    <content type="text"><![CDATA[前言：技术书阅读方法论一.速读一遍（最好在1~2天内完成）人的大脑记忆力有限，在一天内快速看完一本书会在大脑里留下深刻印象，对于之后复习以及总结都会有特别好的作用。 对于每一章的知识，先阅读标题，弄懂大概讲的是什么主题，再去快速看一遍，不懂也没有关系，但是一定要在不懂的地方做个记号，什么记号无所谓，但是要让自己后面再看的时候有个提醒的作用，看看第二次看有没有懂了些。 二.精读一遍（在2周内看完）有了前面速读的感觉，第二次看会有慢慢深刻了思想和意识的作用，具体为什么不要问我，去问30年后的神经大脑专家，现在人类可能还没有总结出为什么大脑对记忆的完全方法论，但是，就像我们专业程序员，打代码都是先实践，然后就渐渐懂了过程，慢慢懂了原理，所以第二遍读的时候稍微慢下来，2周内搞定。记住一句话：没看完一个章节后，总结一下这个章节讲了啥。很关键。 三.实践（在整个过程中都要）实践的时候，要注意不用都去实践，最好看着书，敲下代码，把重点的内容敲一遍有个肌肉记忆就很不错了。 以及到自己做过的项目中去把每个有涉及的原理的代码，研究一遍，就可以了 一共四个系列整整50+本电子书，找了好久终于齐了，如果都能看完看懂且科学的总结外加合理的实践，相信未来你的技术路会更好走，当然阿里巴巴，腾讯，阿里这些的Offer不将是梦，除了多看点技术书，你觉得还有什么能拿出来和985,211的朋友比呢？最近在学习算法和数据结构+涉及一点acm方面的知识，看到一篇好的关于数据结构和算法的书籍，如果计算机系只开三门课，那么这三门课就一定是：离散数学，数据结构与算法，编译原理。如果只开一门课，那剩下的就一定是：数据结构与算法。Niklaus Wirth说：算法＋数据结构＝程序，不说废话了，下面列出一份数据结构+算法书单，从入门到进阶说起。 先发个几个G的资源截图吧，感觉不错的点个小心心~ 百度网盘链接：https://pan.baidu.com/s/1pL6I1w7uOyyYWJ-8LukCRw提取码：q86s备注：里面已经顺便整理压缩好，需要下载后才可以打开，网盘直接打开会显示损坏。 以下是每本书的推荐语，清楚自己缺的是什么，就下定决心去补吧，一个好工作意味着高收入，投资自己的时间换来更宝贵的东西。 一.入门系列推荐理由：通过图片，打比方等通俗易懂的方法讲述算法的书籍让你能达到懂一些基础算法，线性表，堆栈，队列，树，图，DP算法，背包问题等，不要求会实现，但是看过以下这些书对于之后实现算法打下坚实的思维基础。 1.1《啊哈！算法 啊哈磊扫描版》1.2《算法图解》1.3《妙趣横生的算法（C语言实现 第2版）》1.4《趣学算法》1.5《大话数据结构》1.6《算法神探完整版》1.7《算法帝国》1.8《算法设计与分析基础第3版》二.进阶系列推荐理由：在基本入门算法书的调教和领悟下，渐渐懂得一些基础算法是什么，现在就是进阶系列可以参阅，力荐《算法导论》《编程原本》，经典款不解释，当然这些书最好是在入门后再看合适，还有王晓东那本算法书也很不错，有几个版本，可以挑选看还附有课后答案。 2.1《算法导论英文版第三版》2.1《算法导论中文版》2.2《算法 (第4版)》2.3《数据结构与算法 Java版》2.4《Algorithms算法概论中文版》2.5《算法心得-高效算法的奥秘(原书第2版)》2.6《计算机程序设计艺术 第1卷：基本算法（第三版）高清中文版》2.7《计算机程序设计艺术 第2卷：半数值算法（第三版）高清中文版》2.8《计算机程序设计艺术 第3卷：排序与查找（第二版）高清中文版》2.9《数据结构（C语言版）-严蔚敏 吴伟民, 清华大学出版社, 2007》2.9《计算机算法设计与分析 第4版 (王晓东) 课后答案[1-9章]》2.9《计算机算法设计与分析(王晓东)(第三版)》2.9《计算机算法设计与分析(王晓东)(第二版)》2.9《计算机算法设计与分析(第三版)课后习题答案详解》2.10《Java数据结构和算法(第二版)》2.11《编程原本》2.12《算法设计手册第2版 中文版330页》2.13《JavaScrit数据结构与算法（第2版）》2.14《数据结构与算法分析：C语言描述（原书第2版）》2.15《数据结构与算法Python语言描述裘宗燕编著北京：机械工业出版》三.算法题系列推荐理由：一些题海讲解具体的算法思想应用在题目上是怎么求解的，想刷题的可以看看结合各大OJ+leetCode一起学习。多刷题总不会错。 3.1《挑战程序设计竞赛(第2版)》3.2《算法艺术与信息学竞赛(清华大学出版社)》3.3《算法谜题》3.4《编程高手箴言》四.实用工作系列推荐理由：在面试和工作中经常要用到的算法讲解，以及一些过来人工程师的心血总结，建议在面试前翻看，提升思维广度，外加一些实操。 4.10《算法与数据结构-实用算法基础教程》4.1《编程之法 面试和算法心得》4.2《程序员代码面试指南 IT名企算法与数据结构题目最优解 》4.3《算法Ⅰ-Ⅳ(C++ 实现)–基础、数据结构、排序和搜索(第三版)》4.4《程序员实用算法》4.5《编程珠玑（第2版）》4.6《编程之美》4.7《程序调试思想与实践》4.8《[改变未来的九大算法]管策》4.9《排序算法汇总》五.算法奇门遁甲系列推荐理由：包括一些可能在图形学，游戏设计，数据挖掘方面的算法书，偏冷门，乃大佬可以赏读的系列书籍 5.1《matlab数学建模算法全收录 799页 47M 超清书签版》5.2《常用数据挖掘算法总结及ython实现》5.3《机器学习十大算法》5.4《计算机程序设计艺术 The Art o Comuter rogramming 第2卷（第3版）英文版》5.5《算法百科 Encycloeia o Algorithms》5.6《智能Web算法(中文版)》5.7《现代计算机常用数据结构与算法》5.8《数据挖掘原理与算法》5.9《计算几何–算法与应用(中文第三版)》5.10《数值最优化算法（numerical otimization）》## 5.11《计算机图形学原理及算法教程(Visual C++版)-和青芳 清华大学》5.12《算法概论（Algorithm)》5.13《数据结构教程电子版 》5.14《图论中的常用经典算法》 总结：天下没有不劳而获的果实，望各位年轻的朋友，想学技术的朋友，在决心扎入技术道路的路上披荆斩棘，把书弄懂了，再去敲代码，把原理弄懂了，再去实践，将会带给你的人生，你的工作，你的未来一个美梦。 百度网盘链接：https://pan.baidu.com/s/1iYJ6Db8PSb1VsAmMWJ_uDg密码：hcx7备注：里面已经顺便整理压缩好，需要下载后才可以打开，网盘直接打开可能会显示损坏。 附java从入门SE到进阶EE推荐书籍50+本：https://pymlovelyq.github.io/2018/10/06/java/]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>面试</tag>
        <tag>C语言</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java学习之路吐血整理技术书从入门到进阶最全50+本（珍藏版)]]></title>
    <url>%2F2018%2F10%2F21%2Fjava%2F</url>
    <content type="text"><![CDATA[前言：技术书阅读方法论一.速读一遍（最好在1~2天内完成）人的大脑记忆力有限，在一天内快速看完一本书会在大脑里留下深刻印象，对于之后复习以及总结都会有特别好的作用。 对于每一章的知识，先阅读标题，弄懂大概讲的是什么主题，再去快速看一遍，不懂也没有关系，但是一定要在不懂的地方做个记号，什么记号无所谓，但是要让自己后面再看的时候有个提醒的作用，看看第二次看有没有懂了些。 二.精读一遍（在2周内看完）有了前面速读的感觉，第二次看会有慢慢深刻了思想和意识的作用，具体为什么不要问我，去问30年后的神经大脑专家，现在人类可能还没有总结出为什么大脑对记忆的完全方法论，但是，就像我们专业程序员，打代码都是先实践，然后就渐渐懂了过程，慢慢懂了原理，所以第二遍读的时候稍微慢下来，2周内搞定。记住一句话：没看完一个章节后，总结一下这个章节讲了啥。很关键。 三.实践（在整个过程中都要）实践的时候，要注意不用都去实践，最好看着书，敲下代码，把重点的内容敲一遍有个肌肉记忆就很不错了。 以及到自己做过的项目中去把每个有涉及的原理的代码，研究一遍，就可以了 Java开发工程师一般负责后端开发，当然也有专门做Java Web的工程师，但是随着前后端的分离，越来越多的Java工程师需要往大后端方向发展。今天我们就来介绍一下Java后端开发者的书单。首先要感谢一下某大佬力推的后端书架，初学阶段读到了很多好书直到现在都让他印象深刻。 大佬说他在两年的学习历程中看了很多的书，其中不乏XXX入门到精通，XXX王者 归来，XXX指南什么的。 虽然这类书确实毛病很多，但是作为非科班的他来说，当时还是看的津津有味。直到后来我他看到一些优秀的书籍，以及大佬的大佬哥的书架，他才逐渐认识到看一些精品书籍的好处。所以我今天就从这些精品书籍中挑选一些优秀书籍来推荐给大家，当然其中有一些书我自己也没有时间看完。接下来我们按照后端技术栈各个部分的内容来推荐书籍。懂的人自然懂吧，就不多说了，对了最后说一句，进了猪厂。 百度网盘链接：https://pan.baidu.com/s/145KnCHNLyoV_WsMv2mcIsA提取码：j4dj备注：里面已经顺便整理压缩好，需要下载后才可以打开，由于压缩包比较大，网盘直接打开可能会显示损坏。 资源图示： 以下是每本书的推荐语，清楚自己缺的是什么，就下定决心去补吧，一个好工作意味着高收入，投资自己的时间换来更宝贵的东西。 Java从入门SE到进阶EE：一.计算机网络系列：1.《TCP/IP卷一》 这本其实我刚开始没看太懂，可能是当时太水的原因，但是一般是大牛力荐的书。 2.《计算机网络：自顶向下》 这本从应用层讲到物理层，感觉这种方式学起来更轻松，我比较推荐小白看这本。 3.《图解HTTP和图解TCP/IP》 相较于前两本大厚书，这两本书更加亲民，小白可以买来看看，还是很适合入门的。 4.《计算机网络》 没错，就是这本教材，作为非科班选手自己看这本书，那叫一个欲仙欲死啊，看完就忘记了。 二.操作系统系列1.《深入理解计算机系统》 这本书不是严格意义上的操作系统书籍，而是对计算机基础和操作系统做了一个串联，可以解决你很多对于计算机的疑惑，并且对操作系统有一定理解。其实这本书还是很厚的，有一定难度，建议有一些基础后再看。 2. 《现代操作系统》 这本书其实我没怎么看，比较详细地讲解了操作系，但是也是大家都比较推崇的书，还是那句话，很厚，慎看。 3.《Linux内核设计与实现》 当你对操作系统有一定理解以后，这本书将为你打开学习Linux内核的大门，当然在此之前你得有一定的c语言开发能力，以及对Linux的了解。反正，我现在还没开始准备好看这本书。 4.《Unix网络编程》 这两本书的厚度绝对让你感到绝望，其实就是讲解了Unix内核是如何实现网络通信的，其中涉及到很多网络，操作系统的知识，并且你要熟悉c语言。总之，这是一本奉为网络编程神书的存在，不过我等新手还是拿他压压泡面就好了。网上有很多博客会参照该书的内容，可以去看看它们。 三.数据结构与算法系列不瞒你说，由于我非科班，所以算法基础比较差，数据结构是考研时跟着天勤考研指南学的，学习算法也是一路坎坷，举步维艰。还是分享几本比较靠谱的书吧。 1.《算法导论》 你问我是不是认真的，我就是说说而已，这本书我买来没看过。 2.《数据结构与算法（Java版）》 这本书对于初学者来说还是比较友好的，当然学Java的看这本。 3.《算法图解》《啊哈算法》 这两部书籍非常适合学习算法的入门，前者主要用图解的形式覆盖了大部分常用算法，包括dp，贪心等等，可以作为入门书，后者则把很多常用算法都进行了实现，包括搜索，图，树等一些比较高级的常用算法。 4 .《剑指offer》 这本书还是要强烈推荐的，毕竟是面试题经常参考的书籍，当然最好有前面基本的铺垫再看，可能收获更大，这本书在面试之前一般都要嚼烂。 5.LeetCode教科书式刷题网站这不是一本书，是一个题库，算法么，终究还是要靠刷题来提升熟练度的。 四.Java基础系列1.《Java编程思想》 这本书也是被誉为Java神书的存在了，但是对新手不友好，适合有些基础再看，当然要选择性地看。我当时大概只看了1/3 2.《Java核心技术卷一》 这本书还是比较适合入门的，当然，这种厚皮书要看完还是很有难度的，不过比起上面那本要简单一些 五.Java进阶系列1.《深入理解JVM虚拟机》 这本书是Java开发者必须看的书，很多jvm的文章都是提取这本书的内容。JVM是Java虚拟机，赋予了Java程序生命，所以好好看看把，我自己就已经看了三遍了。 2.《Java并发编程实战》 这本书是Java 并发包作者写的书，所以非常权威，但是比较晦涩难懂，我看的云里雾里的，大家可以按需选择。 3.《Java并发编程艺术》 这本书是国内作者写的Java并发书籍，比上面那一本更简单易懂，适合作为并发编程的入门书籍，当然，学习并发原理之前，还是先把Java的多线程搞懂吧。 4.《Effective Java》 这本书和Java编程思想一样被称为神书，主要讲的是Java的一些优化技巧和规范，没有一定开发经验的人看这本书会觉得索然无味，不知所云，所以，先搁着吧。 5.《Java性能调优指南》 说到JVM调优，可能会有很多的面试题浮现在你的脑海里，这本书比较权威地讲解了Java的性能调优方法，不过我还没怎么看，有空好好看看。 6.《 Netty权威指南》 Netty是基于NIO开发的网络编程框架，使用Java代码编程，其实这本书也可以放在网络或者Java Web部分。不过NIO属于JDK自带的一部分，是必须要掌握的，而对于Netty，大家如果学有余力的话也可以看看。 六.JavaWeb系列1.《深入JavaWeb技术内幕》 这本书是Java Web的集大成之作，涵盖了大部分Java Web开发的知识点，不过一本书显然无法把所有细节都讲完，但是作为Java Web的入门或者进阶书籍来看的话还是很不错的。 2.《How Tomcat Works》 Java Web很重要的一部分内容就是Tomcat，作为应用服务器，Tomcat使用Java开发，其源代码和架构设计都是经典之作。 这是一本讲解Tomcat基本原理的书籍，很好地通过剖析源码来讲解Tomcat的内部结构和运行机制，但是需要一定的基础才能够看懂，我还没看这本书，日后再拜读。 2.《Tomcat架构解析》 和上面这本书类似，主要讲解Tomcat原理和架构，，要看懂这本书的话，前提是你要对Java基础，NIO以及设计模式有所了解。这本书我也还没看。 3.《Spring实战》 这本书适合作为Spring的入门书籍，把Spring的概念，使用方式等内容都讲的比较清楚。并且也介绍了Spring MVC的部分内容，Spring框架还是更注重实践的，所以跟着书上的内容去做吧。 4.《Spring源码深度解析》 学会Spring基础后，可以花点时间看看这本讲源码的书了，这本书对于新手来说不太友好，主要也是因为Spring的代码结构比较复杂，大家也可以看一些博客来完成对源码的学习。 5.《Spring MVC学习指南》 本书是一本Spring MVC的教程，内容细致、讲解清晰，非常适合Web开发者和想要使用Spring MVC开发基于Java的Web应用的读者阅读。但是由于出的比较早，所以不太适合现在版本。 6.《Maven实战》 Maven是Java Web开发中不可缺少的一部分，如果想要全面了解其实现原理的话，可以看看这本书。 七.数据库系列1.《数据库原理》 数据库原理应该是教材吧，这本书作为数据库入门来说还是可以的，毕竟不是专门做DB的，看大厚书用处不大，这本书把数据库的基本概念都讲完了。 2.《SQL必知必会》 这本书主要是讲解sql语句怎么写，毕竟数据库最重要的一点就是要熟练地使用sql语句，当然这本书也可以当做工具书来使用。 3.《深入浅出MySQL》 这本书适合作为MySQL的学习书籍，当你有了一定的MySQL使用经验后，可以看看它，该书从数据库的基础、开发、优化、管理维护和架构5个方面对MySQL进行了详细的介绍，讲的不算特别深，但是足够我们使用了。这本书我也只看了一部分。 4.《MySQL技术内幕：innodb存储引擎》 看完上面那本书以后，对MySQL算是比较熟悉了，不过对于面试中常考的innodb引擎，还是推荐一下这本书把，专门讲解了innodb存储引擎的相关内容。我还没有细看，但是内容足够你学好innodb了。 5.《高性能Mysql》 这本书可以说是很厚了，更适合DBA拜读，讲的太详细了，打扰了。 6.《Redis实战》 和MySQL一样，学习Redis的第一步最好也是先实战一下，通过这本书就可以较好地掌握Redis的使用方法，以及相关数据结构了。 7.，《Redis设计与实现》 该书全面而完整地讲解了 Redis 的内部运行机制,对 Redis 的大多数单机功能以及所有多机功能的实现原理进行了介绍。这本书把Redis的基本原理讲的一清二楚，包括数据结构，持久化，集群等内容，有空应该看看。 八.分布式系列1.《分布式Java应用》 这本书是淘宝大牛写的书，主要讲的就是使用rpc来构建分布式的Java应用，讲了很多基础的东西，可以作为入门书籍，不过这本书我之前没有遇到，所以没看过。 2.《大型网站技术架构》 这本淘宝系技术指南还是非常值得推崇的，可以说是把大型网站的现代架构进行了一次简单的总结，内容涵盖了各方面，主要讲的是概念，很适合没接触过架构的同学入门。看完以后你会觉得后端技术原来这么博大精深。 3.《大型分布式网站架构设计与实践》 这本书与上面一书相比更倾向于实践，主要讲的是分布式架构的一些解决方案，但是如果你没有接触过相关的场景，可能会看的云里雾里。 4 .《布式服务框架原理与实践》 上面那本书讲的是分布式架构的实践，而这本书更专注于分布式服务的原理讲解和对应实践，很好地讲述了分布式服务的基本概念，相关技术，以及解决方案等，对于想要学习分布式服务框架的同学来说是本好书。 5.《大型网站系统与Java中间件开发实践》 话说这些书的名字真实够长的。这本书也是阿里系出品，主要讲的是大型网站系统以及使用的相关中间件，毕竟阿里是中间件大户，所以很多中间件对应用再网站系统中，对于想学习这方面技术的同学来说可以一看。 6.《从Paxos到Zookeeper分布式一致性原理与实践》 说起分布式系统，我们需要了解它的原理，相关理论及技术，这本书也是从这个角度出发，讲解了分布式系统的一些常用概念，并且带出了分布式一哥zookeeper，可以说是想学分布式技术的同学必看的书籍。 7.《大规模分布式存储系统》 这本书是阿里巴巴oceanbase核心开发大佬写的书，讲的是分布式存储相关的原理和解决方案，该书不是很厚，如果想做存储方向的同学可以看看。 九.云计算系列云计算方面的内容主要是我在实习阶段接触的，如果只是应用开发方向的话这块不懂也罢。主要还是看个人兴趣。 1.《OpenStack设计与实现》 OpenStack是基于KVM技术的一套私有云生态。这本书很好地讲解了OpenStack的一些基本原理，包括各个组件的设计与实现，比起另一本《OpenStack王者归来》简单易懂的多。当然，前提最好是你对Linux内核和网络有所了解。 2.《docker入门与实践》 docker是现在应用部署的主流方案了，所以了解一下还是挺有必要的，这本书作为入门书籍足够让你会使用docker了。 3.《Kubenetes权威指南》 kubenetes是docker的集群解决方案，也是一个微服务的解决方案，所以这本书涉及的内容非常多，需要有网络，操作系统以及docker相关的基础。我看这本书的时候可以说是非常晕的。 十.大数据系列和云计算一样，大数据方面的内容也不算是Java后端技术栈所需要的，但是这也能为你加分，并且让你跟大数据开发的岗位沾点边，何乐而不为。 1.《大数据技术原理与应用》 作为大数据方面的一本教材，厦大教授写的这本书还是非常赞的，从最基础的原理方面讲解了Hadoop的生态系统，并且把每个组件的原理都讲得比较清楚，另外也加入了spark，storm等内容，可以说是大数据入门非常好的一本书了。 2.《Hadoop实战》 这本书很厚，我买的时候大概看了一遍，一头雾水。所以建议先看上面那本书，再来看更加进阶的书籍，否则可能就是浪费时间了。 3.《Hadoop权威指南》 这本书主要对Hadoop生态中组件进行详细讲解，有点太详细了，如果不是做大数据方向的话，可以不看。 十一.其他系列：1.《Git权威指南》 Git是现在大公司主流的代码协同工具，如果你想要了解其底层原理，可以看看这本书。 2.《重构——改善既有代码的设计》 这本书主要介绍的是代码重构的一些指导思想和最佳实践。有重构需求的同学可以看看。 3.其他的其他其他方面的书籍就太多了，比如软件工程方面的，测试方面，Linux方面，以及讲一些程序员自我提升的书籍，就不一一列举了，因为这部分的内容可以不归入Java后端的技术栈。 十二.颈椎康复系列： 1.《做自己的颈椎医生》 身体是革命的本钱。懂得人不用解释了。 总结： 一.计算机网络系列（4本）：1.《TCP/IP卷一》2.《计算机网络：自顶向下》3.《图解HTTP和图解TCP/IP》4.《计算机网络》二.操作系统系列（4本）1.《深入理解计算机系统》2.《现代操作系统》3.《Linux内核设计与实现》4.《Unix网络编程》三.数据结构与算法系列（4.5本）1.《算法导论》2.《数据结构与算法（Java版）》3.《算法图解，啊哈算法》4.《剑指offer》5.LeetCode教科书式刷题网站四.Java基础系列（2本）1.《Java编程思想》2.《Java核心技术卷一.二》五.Java进阶系列（6本）1.《深入理解JVM虚拟机》2.《Java并发编程实战》3.《Java并发编程艺术》4.《Effective Java》5.《Java性能调优指南》6.《 Netty权威指南》六.JavaWeb系列（7本）1.《深入JavaWeb技术内幕》2.《How Tomcat Works》3.《Tomcat架构解析》4.《Spring实战》5.《Spring源码深度解析》6.《Spring MVC学习指南》7.《Maven实战》七.数据库系列（7本）1.《数据库原理》2.《SQL必知必会》3.《深入浅出MySQL》4.《MySQL技术内幕：innodb存储引擎》5.《高性能Mysql》6.《Redis实战》7.《Redis设计与实现》八.分布式系列（7本）1.《分布式Java应用》2.《大型网站技术架构》3.《大型分布式网站架构设计与实践》4.《布式服务框架原理与实践》5.《大型网站系统与Java中间件开发实践》6.《从Paxos到Zookeeper分布式一致性原理与实践》7.《大规模分布式存储系统》九.云计算系列（3本）1.《OpenStack设计与实现》2.《docker入门与实践》3.《Kubenetes权威指南》十.大数据系列（3本）1.《大数据技术原理与应用》2.《Hadoop实战》3.《Hadoop权威指南》十一.其他系列（2本）1.《Git权威指南》2.《重构——改善既有代码的设计》3.其他的其他十二.颈椎康复指南系列（不开玩笑，适当看看真心有用）（1本）1.《做自己的颈椎医生》 百度网盘链接：https://pan.baidu.com/s/145KnCHNLyoV_WsMv2mcIsA提取码：j4dj备注：里面已经顺便整理压缩好，需要下载后才可以打开，由于压缩包比较大，网盘直接打开可能会显示损坏。 天下没有不劳而获的果实，望各位年轻的朋友，想学技术的朋友，在决心扎入技术道路的路上披荆斩棘，把书弄懂了，再去敲代码，把原理弄懂了，再去实践，将会带给你的人生，你的工作，你的未来一个美梦。]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>面试</tag>
        <tag>java</tag>
        <tag>设计模式</tag>
        <tag>JavaWeb</tag>
        <tag>大数据</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[学习数据库从入门到进阶书籍pdf版吐血整理推荐（珍藏版）]]></title>
    <url>%2F2018%2F10%2F06%2Fdatabase%2F</url>
    <content type="text"><![CDATA[前言：技术书阅读方法论一.速读一遍（最好在1~2天内完成）人的大脑记忆力有限，在一天内快速看完一本书会在大脑里留下深刻印象，对于之后复习以及总结都会有特别好的作用。 对于每一章的知识，先阅读标题，弄懂大概讲的是什么主题，再去快速看一遍，不懂也没有关系，但是一定要在不懂的地方做个记号，什么记号无所谓，但是要让自己后面再看的时候有个提醒的作用，看看第二次看有没有懂了些。 二.精读一遍（在2周内看完）有了前面速读的感觉，第二次看会有慢慢深刻了思想和意识的作用，具体为什么不要问我，去问30年后的神经大脑专家，现在人类可能还没有总结出为什么大脑对记忆的完全方法论，但是，就像我们专业程序员，打代码都是先实践，然后就渐渐懂了过程，慢慢懂了原理，所以第二遍读的时候稍微慢下来，2周内搞定。记住一句话：没看完一个章节后，总结一下这个章节讲了啥。很关键。 三.实践（在整个过程中都要）实践的时候，要注意不用都去实践，最好看着书，敲下代码，把重点的内容敲一遍有个肌肉记忆就很不错了。 以及到自己做过的项目中去把每个有涉及的原理的代码，研究一遍，就可以了 数据库必读18本技术书籍网盘链接： https://pan.baidu.com/s/12D2TcuKSWcI0Tbpoaudlwg提取码：9nbs备注：文件比较大，网盘直接打开会显示损坏，里面已经整理并且压缩好，需要下载后才可以打。 软件开发者编写代码，最终都是要处理数据，因此数据库是必备技能。 实际上，学习数据库并不需要这么从懵圈到放弃。最近，美团•大众点评内部成立了数据库俱乐部，多位一线工程师经过一番讨论，总结出影响过自己成长的9本数据库图书，由浅入深，希望能对同学们有所帮助。 数据库必读书籍总结：一.入门：1.《MySQL必知必会》2.《SQL学习指南（第2版 修订版） 》3.《SQL必知必会》4.《数据库系统概念》二.进 阶5.《MySQL技术内幕——InnoDB存储引擎》6.《Redis设计与实现》7.《SQL语言艺术》8.《SQL反模式》9.《ZooKeeper：分布式过程协同技术详解》三.强 化10.《高可用MySQL（第2版）》11.《高性能MySQL（第3版）》12.《Oracle高效设计》13.《Oracle编程艺术：深入理解数据库体系结构（第3版）》 从入门到进阶数据库书籍推荐理由：一.入门系列： 1.《MySQL必知必会》 这本书英文原版名是很标题党的《Teach Yourself SQL in 10 Minutes》，却是最好的数据库入门书，在Amazon上长期排在数据库销售榜首，建议想快速了解数据库原理和MySQL的新手阅读。快餐性质，简洁明快，小开本，而且很薄，比较好读。有前端工程师表示自己数据库方面只读了这本书，就足以应付大部分开发任务了。 2. 《SQL学习指南（第2版 修订版）》 如果你只想学怎么写SQL，那可以读这本书。O’Reilly动物书系列，品质还是很有保证的。 3.《SQL必知必会》 SQL 是目前使用最为广泛的数据库语言之一。本书没有涉及理论，而是从实践出发，由浅入深地讲解了广大读者所必需的SQL 知识，适用于各种主流数据库。实例丰富，便于查阅。本书涉及不同平台上数据的排序、过滤和分组，以及表、视图、联结、子查询、游标、存储过程和触发器等内容，通过本书读者可以系统地学习到SQL 的知识和方法。 4.《数据库系统概念》 本书是数据库系统方面的经典教材之一，其内容由浅入深，既包含数据库系统基本概念，又反映数据库技术新进展。它被国际上许多著名大学所采用，包括斯坦福大学、耶鲁大学、得克萨斯大学、康奈尔大学、伊利诺伊大学等。 二.进 阶系列5.《MySQL技术内幕——InnoDB存储引擎》 怎么说，每个行业都有几本被翻来翻去的“街书”，而本书就是MySQL的“街书”，该书目前已经有了三版。从源代码的角度深度解析了InnoDB的体系结构、实现原理、工作机制，并给出了大量最佳实践，能帮助你系统而深入地掌握InnoDB。注重实战，全书辅有大量的案例，可操作性极强。 6. 《Redis设计与实现》 Redis是目前应用最广泛的NoSQL数据库。本书系统而全面地描述了Redis内部运行机制，图示丰富，描述清晰，并给出大量参考信息，是NoSQL数据库开发人员案头必备。 7.《SQL语言艺术》 本书分为12章，每一章包含许多原则或准则，并通过举例的方式对原则进行解释说明。这些例子大多来自于实际案例，对九种SQL经典查询场景以及其性能影响讨论，非常便于实践，为你的实际工作提出了具体建议。本书适合SQL数据库开发者、软件架构师，也适合DBA，尤其是数据库应用维护人员阅读。 8.《SQL反模式》 它介绍了如何避免在SQL的使用和开发中陷入一些常见却经常被忽略的误区。它通过讲述各种具体的案例，以及开发人员和使用人员在面对这些案例时经常采用的错误解决方案，来介绍如何识别、利用这些陷阱，以及面对问题时正确的解决手段。另外，《SQL反模式》还涉及了SQL的各级范式和针对它们的正确理解。 9. 《ZooKeeper：分布式过程协同技术详解》 ZooKeeper是Google的Chubby项目的开源实现，它曾经作为Hadoop的子项目，在大数据领域得到广泛应用。ZooKeeper以Fast Paxos算法为基础，同时为了解决活锁问题，对Fast Paxos算法进行了优化，因此也可以广泛用于大数据之外的其他分布式系统，为大型分布式系统提供可靠的协作处理功能。这本书是实际开发和维护中的一本最佳参考书籍。 三.强 化系列10.《高可用MySQL（第2版）》 主要讲解真实环境下如何使用MySQL的复制、集群和监控特性，揭示MySQL可靠性和高可用性的方方面面。此书定位于解决MySQL数据库的常见应用瓶颈，在保持MySQL持续可用性的前提下，挖潜各种提高性能的解决方案。 11.《高性能MySQL（第3版）》 作者推荐的工具、实战案例及经验过的诊断技术，可大大提高性能急救技能，以及加深对MySQL本质的理解。而且本书将数据库结构的客观方面纳入思考，此外还增补了MySQL高可用性及云特性。 12. 《Oracle高效设计》 这是一本程序员普遍反映收益比较大的一本书，作者Thomas Kyte，Oracle专业领域世界上最权威的专家之一，他是Oracle核心技术小组副主席，兼《Oracle Magazine》及其在线论坛“Ask Tom”专栏作家。本书对Oracle及数据库的知识进行了全面深入的讲解，是一本关于Oracle的高级手册。本书内容翔实，实例丰富，语言流畅且浅显易懂，适合作为从事Oracle开发人员的参考手册。 13. 《Oracle编程艺术：深入理解数据库体系结构（第3版）》 对于想学习SQL、PL/SQL的书，这是一本必读之物，除此之外，该书从开发的角度详细解读了整个Oracle体系结构，深入浅出，绝对佳作。 数据库必读书籍总结： 一.入门系列：1.《MySQL必知必会》2.《SQL学习指南（第2版 修订版） 》3.《SQL必知必会》4.《数据库系统概念》二.进阶系列：5.《MySQL技术内幕——InnoDB存储引擎》6.《Redis设计与实现》7.《SQL语言艺术》8.《SQL反模式》9.《ZooKeeper：分布式过程协同技术详解》三.强化系列：10.《高可用MySQL（第2版）》11.《高性能MySQL（第3版）》12.《Oracle高效设计》13.《Oracle编程艺术：深入理解数据库体系结构（第3版）》 网盘下载链接数据库必读18本技术书籍https://pan.baidu.com/s/12D2TcuKSWcI0Tbpoaudlwg提取码：9nbs备注：文件比较大，网盘直接打开会显示损坏，里面已经整理并且压缩好，需要下载后才可以打。 附java从入门到进阶推荐书籍50+本：https://pymlovelyq.github.io/2018/10/06/java/总结：天下没有不劳而获的果实，望各位年轻的朋友，想学技术的朋友，在决心扎入技术道路的路上披荆斩棘，把书弄懂了，再去敲代码，把原理弄懂了，再去实践，将会带给你的人生，你的工作，你的未来一个美梦。]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>面试</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[机器学习和python学习之路吐血整理技术书从入门到进阶(珍藏版)]]></title>
    <url>%2F2018%2F10%2F06%2FmachineLearning%2F</url>
    <content type="text"><![CDATA[“机器学习／深度学习并不需要很多数学基础！”也许你在不同的地方听过不少类似这样的说法。对于鼓励数学基础不好的同学入坑机器学习来说，这句话是挺不错的。不过，机器学习理论是与统计学、概率论、计算机科学、算法等方面交叉的领域，对这些技术有一个全面的数学理解对理解算法的内部工作机制、获取好的结果是有必要的。机器学习确实需要对一些数学领域有深入理解，缺乏必要的数学知识，很可能在更深入的学习中不断遇到挫折，甚至导致放弃。说的很多小伙伴恐怕心都凉了一半，或者已经开始打退堂鼓了。不要紧，山人自有妙法。下面就给大家分享一下，主要是一些资源（书籍或者视频课程）。人工智能（机器学习或数据挖掘等）中最最重要的数学就是线性代数与概率论（还有其他，但这两者比重最大）。 所以我找了个书单自学，电子书为主，顺便分享出来。使用电子书的形式是因为，个人偏好。即使我买了实体书，一旦找到了电子书，我马上就会把纸质书扔到床底下。如果侵犯了任何人的权益，烦请及时通知。 前言：技术书阅读方法论一.速读一遍（最好在1~2天内完成）人的大脑记忆力有限，在一天内快速看完一本书会在大脑里留下深刻印象，对于之后复习以及总结都会有特别好的作用。 对于每一章的知识，先阅读标题，弄懂大概讲的是什么主题，再去快速看一遍，不懂也没有关系，但是一定要在不懂的地方做个记号，什么记号无所谓，但是要让自己后面再看的时候有个提醒的作用，看看第二次看有没有懂了些。 二.精读一遍（在2周内看完）有了前面速读的感觉，第二次看会有慢慢深刻了思想和意识的作用，具体为什么不要问我，去问30年后的神经大脑专家，现在人类可能还没有总结出为什么大脑对记忆的完全方法论，但是，就像我们专业程序员，打代码都是先实践，然后就渐渐懂了过程，慢慢懂了原理，所以第二遍读的时候稍微慢下来，2周内搞定。记住一句话：没看完一个章节后，总结一下这个章节讲了啥。很关键。 三.实践（在整个过程中都要）实践的时候，要注意不用都去实践，最好看着书，敲下代码，把重点的内容敲一遍有个肌肉记忆就很不错了。 以及到自己做过的项目中去把每个有涉及的原理的代码，研究一遍，就可以了 百度网盘链接：https://pan.baidu.com/s/1wIL_5arbxhjvzWeyba89kA提取码：b379备注：文件比较大，网盘直接打开会显示损坏，里面已经整理并且压缩好，需要下载后才可以打。 一. 数学基础1.微积分：《微积分学教程》 （F.M.菲赫金哥尔茨）俄罗斯的数学书 2.线性代数：《Linear Algebra and Its Applications,Third Edition （David C.Lay）》讲得很实际，线性代数最重要的就是与实际应用相联系才能够理解其意义 3.概率与统计：《概率论与数理统计 （陈希孺）》或《概率论与数理统计（盛骤/谢式千/潘承毅）》这两本书都很不错![3.1.png](https://i.loli.net/2018/10/27/5bd3d780336eb.png) 4.随机过程：《应用随机过程:概率模型导论 （Sheldon M. Ross）》这本书已经出到第10版了这四门是数学的基础，当然数学本身就是博大精深的。 二. 机器学习与数据挖掘（偏理论）1.《 统计学习方法 （李航）》 2.《统计学习基础 （Trevor Hastie, Robert Tibshirani, Jerome Friedman）》3.《Pattern Recognition and Machine Learning （Christopher Bishop）》4.《Introduction to Machine Learning （Ethem Alpaydin）》（《机器学习导论》）6.《Data Mining （韩家炜） 》7.《现代模式识别 （孙即祥） 》 个人觉得《统计学习方法》与《统计学习基础》这两本书是基础，后面的书内容相差不大，所以前两本书应该看，而入门的话，后面的书可以选1到2本精读，剩下的书可作参考。 三. 智能算法（偏应用）1.《Web智能算法 （Haralambos Marmanis, Dmitry Babenko）》2.《集体智慧编程 （Toby Segaran）》3.《推荐系统实践 （项亮）》 4.《数据之魅 （Pbilipp K.Janert）》这几本书均是从实践的角度讲解了机器学习中常用的算法，非常值得一看。有人推荐，学习机器学习的话可以先读《统计学习方法》和《统计学习基础》打底，这样就包含了大部分的算法，然后再深入研究某个算法。 四.机器学习入门级：1.《数学之美》；作者吴军大家都很熟悉。这本书主要的作用是引起了我对机器学习和自然语言处理的兴趣。里面以极为通俗的语言讲述了数学在这两个领域的应用。2.《Programming Collective Intelligence》（中译本《集体智慧编程》）；作者Toby Segaran也是《BeautifulData : The Stories Behind Elegant Data Solutions》（《数据之美：解密优雅数据解决方案背后的故事》）的作者。这本书最大的优势就是里面没有理论推导和复杂的数学公式，是很不错的入门书。目前中文版已经脱销，对于有志于这个领域的人来说，英文的pdf是个不错的选择，因为后面有很多经典书的翻译都较差，只能看英文版，不如从这个入手。还有，这本书适合于快速看完，因为据评论，看完一些经典的带有数学推导的书后会发现这本书什么都没讲，只是举了很多例子而已。3.《Algorithms of the Intelligent Web》（中译本《智能web算法》）；作者Haralambos Marmanis、Dmitry Babenko。这本书中的公式比《集体智慧编程》要略多一点，里面的例子多是互联网上的应用，看名字就知道。不足的地方在于里面的配套代码是BeanShell而不是python或其他。总起来说，这本书还是适合初学者，与上一本一样需要快速读完，如果读完上一本的话，这一本可以不必细看代码，了解算法主要思想就行了。4.《统计学习方法》；作者李航，是国内机器学习领域的几个大家之一，曾在MSRA任高级研究员，现在华为诺亚方舟实验室。书中写了十个算法，每个算法的介绍都很干脆，直接上公式，是彻头彻尾的“干货书”。每章末尾的参考文献也方便了想深入理解算法的童鞋直接查到经典论文；本书可以与上面两本书互为辅助阅读。5.《Machine Learning》（《机器学习》）；作者TomMitchell[2]是CMU的大师，有机器学习和半监督学习的网络课程视频。这本书是领域内翻译的较好的书籍，讲述的算法也比《统计学习方法》的范围要大很多。据评论这本书主要在于启发，讲述公式为什么成立而不是推导；不足的地方在于出版年限较早，时效性不如PRML。但有些基础的经典还是不会过时的，所以这本书现在几乎是机器学习的必读书目。那么Mitchell的&lt;机器学习&gt;是经典的入门之作。当然，因为年代久远，很多新的模型都没有涉及到，但不影响他的经典性——入门级。6.《机器学习实战》对于程序员，想快速了解模型流程和优缺点的，甚至是实现模型的，那么是我比较推荐的，现在已经有中文版了&lt;机器学习实战&gt;。这本书，提到了很多常见的模型，开始就是模型背景简介，之后是模型优缺点和应用场景、在接着算法实现和案例。而且，在书的最后，提及了一些比较切合时代的话题——大数据下机器学习。《机器学习基础》对于想从事机器学习的入门人员，比较推荐一本有中文版的&lt;机器学习基础&gt;(Simon Rogers的，英国格拉斯哥大学计算机科学学院讲师)，这本书适合高年级本科生和研究生。从理论的角度，推导了各个算法，以及探究了各个模型的特性等。涉及数学和矩阵的地方，都有详细的参照。适合高端点的入门，看这本书，可以体会一下自己的数学和矩阵，有种必须要加强的感觉。 7.《Mining of Massive Datasets》（《大数据》）；作者Anand Rajaraman[3]、Jeffrey David Ullman，Anand是Stanford的PhD。这本书介绍了很多算法，也介绍了这些算法在数据规模比较大的时候的变形。但是限于篇幅，每种算法都没有展开讲的感觉，如果想深入了解需要查其他的资料，不过这样的话对算法进行了解也足够了。还有一点不足的地方就是本书原文和翻译都有许多错误，勘误表比较长，读者要用心了。8.《Data Mining: Practical Machine Learning Tools and Techniques》（《数据挖掘：实用机器学习技术》）；作者Ian H. Witten 、Eibe Frank是weka的作者、新西兰怀卡托大学教授。他们的《ManagingGigabytes》[4]也是信息检索方面的经典书籍。这本书最大的特点是对weka的使用进行了介绍，但是其理论部分太单薄，作为入门书籍还可，但是，经典的入门书籍如《集体智慧编程》、《智能web算法》已经很经典，学习的话不宜读太多的入门书籍，建议只看一些上述两本书没讲到的算法。五.机器学习深入级：1.《Pattern Classification》（《模式分类》第二版）；作者Richard O. Duda[5]、Peter E. Hart、David。模式识别的奠基之作，但对最近呈主导地位的较好的方法SVM、Boosting方法没有介绍，被评“挂一漏万之嫌”。2.《The Elements of Statistical Learning : Data Mining, Inference, andPrediction》，（《统计学习基础：数据挖掘、推理与预测》第二版）；作者RobertTibshirani、Trevor Hastie、Jerome Friedman。“这本书的作者是Boosting方法最活跃的几个研究人员，发明的Gradient Boosting提出了理解Boosting方法的新角度，极大扩展了Boosting方法的应用范围。这本书对当前最为流行的方法有比较全面深入的介绍，对工程人员参考价值也许要更大一点。另一方面，它不仅总结了已经成熟了的一些技术，而且对尚在发展中的一些议题也有简明扼要的论述。让读者充分体会到机器学习是一个仍然非常活跃的研究领域，应该会让学术研究人员也有常读常新的感受。”[7]3. 机器学习与数据挖掘（偏理论） 百度网盘链接：https://pan.baidu.com/s/1wIL_5arbxhjvzWeyba89kA提取码：b379备注：文件比较大，网盘直接打开会显示损坏，里面已经整理并且压缩好，需要下载后才可以打。 附java从入门到进阶推荐书籍50+本：https://pymlovelyq.github.io/2018/10/06/java/总结：天下没有不劳而获的果实，望各位年轻的朋友，想学技术的朋友，在决心扎入技术道路的路上披荆斩棘，把书弄懂了，再去敲代码，把原理弄懂了，再去实践，将会带给你的人生，你的工作，你的未来一个美梦。]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>算法</tag>
        <tag>面试</tag>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[java面试题之汉诺塔求解策略《六》]]></title>
    <url>%2F2018%2F09%2F06%2FjavaForSix%2F</url>
    <content type="text"><![CDATA[java版汉诺塔1234567891011121314151617181920212223242526272829public class Hanoi &#123; public static void main(String[] args)&#123; Hanoi.hanoi(3,'A','B','C'); &#125; public static void hanoi(int n,char a,char b,char c)&#123; ZF z = new ZF(); if(n==1)&#123; print(a,c); &#125; else&#123; hanoi(n-1,a,c,b); print(a,c); hanoi(n-1,b,a,c); &#125; System.out.println("---------第"+(ZF.x++)+"次递归---------------------------------"); &#125; public static void print(char a,char c)&#123; System.out.println("盘子从"+a+"---&gt;"+c); &#125;&#125; class ZF &#123; static public int x=1;&#125;//思想是将全局变量X设置成SS类的属性，//再在SS中添加fuzhi方法，来改变X的值。 汉诺塔求解推荐阅读博客：https://www.bilibili.com/video/av7398130/https://blog.csdn.net/xb2355404/article/details/79144451https://www.cnblogs.com/antineutrino/p/3334540.html]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>面试</tag>
        <tag>java</tag>
        <tag>递归</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python从入门到进阶推荐书籍最全整理pdf分享附网盘链接已拿BT豆瓣offer]]></title>
    <url>%2F2018%2F09%2F06%2FPython%2F</url>
    <content type="text"><![CDATA[从八月底开始找工作，短短的一星期多一些，面试了9家公司，拿到5份Offer，可能是因为我所面试的公司都是些创业性的公司吧，不过还是感触良多，因为学习Python的时间还很短，没想到还算比较容易的找到了工作，就把自己找的python资源和大家分享一下，希望为学习Python找工作的小伙伴们提供些许帮助。作为Python爱好者，广泛搜集了关于Python的书籍，具体包括数据挖掘、人工智能、网络编程等，范围广，资料全面，多为可编辑的pdf版本，不少都是各学科领域Python的书籍。当然论坛也有这些书籍，但是有的书籍较为难找，且大多数需要论坛币。为此，本人花费大量时间搜集整理Python书籍，并上传以下超过100本书籍，希望能够为Python爱 好者节省搜集书籍的时间，相互交流，共同学习。Python具有一些特征，使其成为第一种编程语言的接近完美的选择。Python基本结构简单、干净、设计精良，使学生能够专注于算法思维和程序设计的主要技能，而不会陷晦涩难解的语言细节。在Python中学习的概念可以直接传递给后续学习的系统语言（如C ++和Java）。但Python不是一种“玩具语言”，它是一种现实世界的生产语言，可以在几乎每个编程平台上免费提供，并且具有自己易于使用的集成编程环境。最好的是，Python让学习编程又变得有趣了。 前言：技术书阅读方法论一.速读一遍（最好在1~2天内完成）人的大脑记忆力有限，在一天内快速看完一本书会在大脑里留下深刻印象，对于之后复习以及总结都会有特别好的作用。 对于每一章的知识，先阅读标题，弄懂大概讲的是什么主题，再去快速看一遍，不懂也没有关系，但是一定要在不懂的地方做个记号，什么记号无所谓，但是要让自己后面再看的时候有个提醒的作用，看看第二次看有没有懂了些。 二.精读一遍（在2周内看完）有了前面速读的感觉，第二次看会有慢慢深刻了思想和意识的作用，具体为什么不要问我，去问30年后的神经大脑专家，现在人类可能还没有总结出为什么大脑对记忆的完全方法论，但是，就像我们专业程序员，打代码都是先实践，然后就渐渐懂了过程，慢慢懂了原理，所以第二遍读的时候稍微慢下来，2周内搞定。记住一句话：没看完一个章节后，总结一下这个章节讲了啥。很关键。 三.实践（在整个过程中都要）实践的时候，要注意不用都去实践，最好看着书，敲下代码，把重点的内容敲一遍有个肌肉记忆就很不错了。 以及到自己做过的项目中去把每个有涉及的原理的代码，研究一遍，就可以了 百度网盘链接：https://pan.baidu.com/s/1yujN2BoaObDJYBFKqcghkg提取码：9c4n备注：里面已经顺便整理压缩好，需要下载后才可以打开，网盘直接打开会显示损坏。 首先推荐大家通过这两本书来入门数据挖掘这个领域，python数据挖掘这本书较容易，还花了很大的篇幅来讲python基础，而python数据挖掘入门与实践则直接从实例讲起，需要读者有一定的python基础。 数据挖掘主要是通过python或者Ｒ语言来实现的，因为这两门语言有它们独特的优势，比如包含大量的函数式编程接口，高效的模块等等，这些都使它们非常适合用来进行数据挖掘和数据分析。所以都要求编程者要有这方面的知识体系。但是，说到底语言只是一个工具，真正要在一门领域取得建树，还是要靠编程者的思维能力和实践能力，比如算法水平和编码或者debug（项目）能力。不过，对python这个强大工具有很深入的了解，会对数据挖掘的学习有事半功倍的效果。 推荐使用anaconda作为python的编译库，里面包括了大量的实用模块，比如numpy(科学计算，如矩阵，二维数组，与表格最为相似的数据结构),pandas(数据分析，如数据框（虚拟内存数据库），系列),Scipy(科学计算，向量化思想，包括符号计算和函数向量化),scikit-learn(用于机器学习，数据挖掘，数据分析，六大功能：分类，回归，聚类，降维，模型选择，预处理),Matplotlib,Bokeh(数据分析及可视化)等等。这些都有助于进行数据挖掘和数据分析。 数据挖掘和数据分析等领域包含了大量的算法，比如K-Means,DBSCAN,Apriori,kNN,朴素贝叶斯，BP神经网络,CART，决策树等算法，这对编程者的算法能力和思维能力产生了极大的挑战。只有掌握了这些算法，才能更好地，更高效地，更快速地实现目标。如果有ACM经验的话，学起来应该会更加快速和适应。这些算法，我觉得结合实际例子来学习可能更加容易理解，比如用决策树来预测获胜球队，使用朴素贝叶斯进行社会媒体挖掘，用神经网络破解验证码，用深度学习方法为图像中的物体进行分类。结合实例的话，可以更好地去学习,理解和实践。 最后给大家推荐后续的学习路线，可以去kaggle上参加数据挖掘比赛，或者参考学习别人的优秀项目。还可以去coursera上面学习数据挖掘的相关课程，进一步提高自己的能力和拓展自己的视野。 1《《区块链中文词典》维京&amp;甲子》PDF版.pdf2《Beautiful_Soup中文文档》PDF版.pdf3《Head_First_Python（中文版）》PDF版.pdf4《Intermediate_Python中文译本》PDF版.pdf5《Keras中文手册》PDF版.pdf6《Node.js区块链开发》PDF版.pdf7《NumPy攻略Python科学计算与数据分析_［（印尼）IvanIdris著；张崇明译］［人民邮电出版社］［2013.10］［174页］》PDF版.pdf8《Phthon编程金典》PDF版.pdf9《Python3程序开发指南（美）萨默菲尔德.扫描版》PDF版.pdf10《Python3网络爬虫数据采集》PDF版.pdf11《Python100经典练习题》PDF版.pdf12《python_by_Liao》PDF版.pdf13《python_cookbook（第3版）高清中文完整版》PDF版.pdf14《Python_Web开发：测试驱动方法》PDF版.pdf15《PythonWeb开发实战pdf解压密码》PDF版.pdf16《Python_Web开发实战》PDF版.pdf17《Python_文本处理指南［经典］》PDF版.pdf18《Python文本处理指南［经典］pdf解压密码》PDF版.pdf19《python cookbook(第3版)高清中文完整版(###)》PDF版.pdf20《PYTHON QT GUI快速编程 PYQT编程指南 ,马克·萨默菲尔德 ,P444 ,2016.08》PDF版.pdf21《Python编程：从入门到实践(#)》PDF版.pdf22《Python编程初学者指南》PDF版.pdf23《Python编程导论第2版_2018（#）》PDF版.pdf24《Python编程快速上手—让繁琐工作自动化_PDF中文高清晰完整版》PDF版.pdf25《Python编程快速上手让繁琐工作自动化》PDF版.pdf26《Python编程入门 第3版》PDF版.pdf27《Python编程入门经典》PDF版.pdf28《Python编程实战运用设计模式、并发和程序库创建高质量程序PDF电子书下载带书签目录完整版》PDF版.pdf29《python标准库》PDF版.pdf30《Python参考手册(第4版)》PDF版.pdf31《Python程序员指南》PDF版.pdf32《Python初学教程：《简明Python教程》》PDF版.pdf33《Python地理空间分析指南（第2版）》PDF版.pdf34《Python高级编程（清华）》PDF版.pdf35《Python高级编程第2版张亮 阿信（译）_人民邮电出版社_2017-10_v2_完整版》PDF版.pdf36《Python高性能编程》PDF版.pdf37《Python核心编程第3版中文版》PDF版.pdf38《Python核心编程中文》PDF版.pdf39《Python灰帽子——黑客与逆向工程师的Python编程之道》PDF版.pdf40《Python灰帽子》PDF版.pdf41《PYTHON机器学习及实践－从零开始通往KAGGLE竞赛之路》PDF版.pdf42《Python基础教程（第3版）（#）》PDF版.pdf43《Python技术参考大全》PDF版.pdf44《Python金融大数据分析》PDF版.pdf45《Python进阶（Intermediate_Python）中文PDF彩色版》PDF版.pdf46《Python开发技术详解》PDF版.pdf47《Python开发实战(PDF版)》PDF版.pdf48《Python开发实战》PDF版.pdf49《Python科学计算(#)》PDF版.pdf50《Python科学计算张若愚》PDF版.pdf51《PYTHON面向对象编程指南 [（美）STEVEN F.LOTT著；张心韬，兰亮译][人民邮电出版》PDF版.pdf52《Python爬虫开发与项目实战》PDF版.pdf53《Python入门经典以解决计算问题为导向的Python编程》PDF版.pdf54《Python数据处理(###)》PDF版.pdf55《Python数据处理》PDF版.pdf56《Python数据分析基础》PDF版.pdf57《Python数据分析基础教程：NumPy学习指南（第2版）(1)》PDF版.pdf58《Python数据分析基础教程：NumPy学习指南（第2版）》PDF版.pdf59《Python数据分析实战_2016版》PDF版.pdf60《Python数据科学手册》PDF版.pdf61《PYTHON数据可视化编程实战》PDF版.pdf62《PYTHON数据可视化编程实战_13720859(1)》PDF版.pdf63《PYTHON数据可视化编程实战13720859》PDF版.pdf64《Python网络编程基础》PDF版.pdf65《Python网络数据采集》PDF版.pdf66《Python学习手册(第4版)》PDF版.pdf67《Python学习手册（第3版）》PDF版.pdf68《Python学习手册（第4版）》PDF版.pdf69《python 学习资料 》PDF版.pdf70《Python语言及其应用》PDF版.pdf71《Python语言入门》PDF版.pdf72《Python源码剖析-深度探索动态语言核心技术》PDF版.pdf73《Scikit－Learn教學：Python_與機器學習（Article）》PDF版.pdf74《Selenium 2自动化测试实战 基于Python语言》PDF版.pdf75《TensorFlow实践与智能系统》PDF版.pdf76《Tensorflow 实战Google深度学习框架》PDF版.pdf77《wxPython实战(中文版）》PDF版.pdf78《白话深度学习与TensorFlow》PDF版.pdf79《贝叶斯思维统计建模的PYTHON学习法》PDF版.pdf80《笨办法学 Python(第四版）》PDF版.pdf81《编程小白的第一本python入门书》PDF版.pdf82《编写高质量代码 改善Python程序的91个建议》PDF版.pdf83《常用数据挖掘算法总结及Python实现》PDF版.pdf84《从Excel到Python——数据分析进阶指南》PDF版.pdf85《从Python开始学编程》PDF版.pdf86《大数据交易区块链技术应用标准》PDF版.pdf87《机器学习numpy和pandas基础》PDF版.pdf88《机器学习实战》PDF版.pdf89《基于Python实现的微信好友数据分析》PDF版.pdf90《简明Python教程（#）》PDF版.pdf91《精通Python设计模式带索引书签目录》PDF版.pdf92《精通比特币》PDF版.pdf93《可爱的Python脚本语言入门精品文章》PDF版.pdf94《利用Python进行数据分析(###)》PDF版.pdf95《量化投资以Python为工具》PDF版.pdf96《流畅的python》PDF版.pdf97《轻量级Django_，Julia_Elman_，P218_，2016.10》PDF版.pdf98《区块链：互联网的诗和远方》PDF版.pdf99《区块链 从数字货币到信用社会》PDF版.pdf100《区块链革命》PDF版.pdf101《区块链行业词典-甲子光年+维京资本 2018.02》PDF版.pdf102《区块链技术-在线教育共享生态的基石》PDF版.pdf103《区块链技术——通往未来的虫洞》PDF版.pdf104《区块链 将如何重新定义世界》PDF版.pdf105《区块链社会》PDF版.pdf106《区块链 新经济蓝图及导读》PDF版.pdf107《社交网站的数据挖掘与分析_中文版》PDF版.pdf108《深度学习-无水印-中文版》PDF版.pdf109《深入Python3中文版》PDF版.pdf110《数据结构与算法Python语言描述裘宗燕编著北京：机械工业出版社_，_2016.01_P346》PDF版.pdf111《数据科学入门(1)》PDF版.pdf112《数据科学入门》PDF版.pdf113《腾讯区块链白皮书》PDF版.pdf114《图说区块链，区块链革命，区块链社会，区块链技术驱动金融，区块链重塑经济与世界6本》PDF版.pdf115《图说区块链》PDF版.pdf116《网络爬虫－Python和数据分析》PDF版.pdf117《以太坊白皮书（中文）》PDF版.pdf118《用Python进行自然语言处理(中文翻译NLTK)》PDF版.pdf119《用Python写网络爬虫》PDF版.pdf121《与孩子一起学编程（第一版）》PDF版.pdf122《征服PYTHON-语言基础与典型应用》PDF版.pdf123《中国区块链技术和应用发展白皮书》PDF版.pdf **百度网盘链接：https://pan.baidu.com/s/1yujN2BoaObDJYBFKqcghkg提取码：9c4n]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>算法</tag>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[java面试题之快速排序的求解策略《五》]]></title>
    <url>%2F2018%2F09%2F04%2Fjava%E9%9D%A2%E8%AF%95%E9%A2%98%E4%B9%8B%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E7%9A%84%E6%B1%82%E8%A7%A3%E7%AD%96%E7%95%A5%E4%BA%94%2F</url>
    <content type="text"><![CDATA[一.快速排序的基本思想:通过一轮的排序将序列分割成独立的两部分，其中一部分序列的关键字（这里主要用值来表示）均比另一部分关键字小。继续对长度较短的序列进行同样的分割，最后到达整体有序。在排序过程中，由于已经分开的两部分的元素不需要进行比较，故减少了比较次数，降低了排序时间。 二.快排的平均运行时间复杂度是:O(nlog(n))。快速排序最坏的时间复杂度是O(n^2）== 冒泡排序最坏时间复杂度也是O(O^2)。 三.3种实现方法 ①固定基准元法 【如果输入序列是随机的，处理时间是可以接受的。如果数组已经有序时，此时的分割就是一个非常不好的分割。 因为每次划分只能使待排序序列减一，此时为最坏情况，快速排序沦为冒泡排序，时间复杂度为Θ(n^2)。 而且，输入的数据是有序或部分有序的情况是相当常见的。因此，使用第一个元素作为基准元是非常糟糕的，应该立即放弃这种想法。】 ②随机基准元 【这是一种相对安全的策略。 由于基准元的位置是随机的，那么产生的分割也不会总是会出现劣质的分割。 在整个数组数字全相等时，仍然是最坏情况，时间复杂度是O(n^2）。 实际上，随机化快速排序得到理论最坏情况的可能性仅为1/(2^n）。 所以随机化快速排序可以对于绝大多数输入数据达到O(nlogn）的期望时间复杂度】 ③三数取中【引入的原因：虽然随机选取基准时，减少出现不好分割的几率，但是还是最坏情况下还是O(n^2）， 要缓解这种情况，就引入了三数取中选取基准。】 四.总结分析： 最佳的划分是将待排序的序列分成等长的子序列，最佳的状态我们可以使用序列的中间的值，也就是第N/2个数。 可是，这很难算出来，并且会明显减慢快速排序的速度。这样的中值的估计可以通过随机选取三个元素并用它们的中值作为基准元而得到。 事实上，随机性并没有多大的帮助，因此一般的做法是使用左端、右端和中心位置上的三个元素的中值作为基准元。 显然使用三数中值分割法消除了预排序输入的不好情形，并且减少快排大约5%的比较次数。 五.补充总结 下面代码中 arry[left]可以换为arry[left+(right-left)/2] 实质也就是三值取中法，时间复杂度相对比arry[left]会减少很多。 下面是一个1000个随机的数，可以作为参考数据。 java版快速排序1234567891011121314151617181920212223242526272829303132333435363738394041424344454647import java.util.Arrays;public class quickSortAlgorithm1 &#123; public static void main(String[] args)&#123; long startTime = System.currentTimeMillis(); //获取开始时间 int[] num=&#123;1244,1060,1826,1976,230,68,169,735,2089,1533,1914,186,1714,1764,1931,2089,1468,36,109,1518,1588,1068,648,153,1530,1231,584,1009,1685,97,138,1274,181,1706,186,1440,648,1346,415,1596,1593,2012,1125,1322,927,534,39,1051,821,1700,711,1783,401,704,1759,848,226,1668,1514,1630,1847,1029,53,1214,1316,1155,1194,665,1569,1063,1442,1388,1775,287,1949,1608,1172,430,118,255,866,1687,450,2135,203,1975,1951,62,743,808,1658,178,1855,1303,1953,626,814,872,1427,601,529,287,1706,2136,109,158,1989,260,436,1245,1984,302,1382,1437,2012,116,944,247,1377,590,1030,1236,710,880,214,1802,1996,602,1577,1012,1340,204,1519,194,237,862,1006,543,819,1830,1709,835,1902,1271,1744,1794,1061,1890,2050,1351,1892,901,199,1612,1091,891,74,584,545,1966,1645,1303,2075,1480,942,1572,462,1598,1263,217,920,1060,943,917,680,1805,1845,1582,222,522,354,4,1476,345,765,1194,388,1981,1058,1684,427,1320,561,493,1942,79,455,1818,429,677,496,1749,1605,1515,2116,290,1901,1553,1695,1305,245,937,1764,989,219,1408,1554,1816,1378,392,1553,1084,1173,382,1782,1180,2002,767,436,344,1924,1691,49,1670,1812,862,578,641,1497,1542,215,1018,969,617,1088,1529,241,2014,1599,1810,2040,463,1304,1223,1704,605,433,1029,1223,1414,808,207,1309,1199,1106,694,2058,1733,972,146,433,596,1198,382,771,497,1877,92,1043,1628,305,1427,1349,810,2004,992,287,1136,1404,1456,1212,1609,2135,613,1923,393,118,2132,497,1746,656,190,58,488,1303,1583,534,673,920,779,1644,1388,961,1966,856,1049,1683,176,919,1786,1818,1149,1471,588,1860,804,626,1909,815,1985,868,71,1535,284,962,1085,3,11,1325,1039,1717,542,877,384,110,166,486,690,1758,1754,790,121,1415,1851,853,1927,736,260,1279,1761,115,1066,2146,343,236,1129,182,1993,997,1441,1513,1531,894,1882,1675,1118,1018,906,1549,159,622,1608,229,808,2044,1951,330,1724,668,1547,1527,1123,163,1530,912,600,249,740,2122,2098,793,1861,1605,166,358,1807,1859,1588,408,1628,269,785,445,300,2060,564,1722,1339,1050,2066,1414,36,669,1875,431,268,528,939,938,1311,1816,1290,974,1676,1154,1862,115,1238,296,2004,1720,1720,1823,1088,1640,1824,1769,1392,138,646,176,1504,298,459,544,1711,1138,507,464,1555,1105,1045,1859,103,970,1426,1029,838,339,1009,777,1715,541,452,367,522,1549,714,1679,527,1680,1608,1375,104,1978,1246,1001,243,1167,1146,1484,165,906,1858,1913,1533,733,2141,1704,709,1938,1036,1023,1578,159,1088,1970,2022,1625,487,1057,1881,487,1231,2036,833,74,1146,2040,1442,473,62,511,922,1876,361,258,2124,1178,232,1378,992,1754,1043,1359,1112,1643,1508,1941,774,664,2047,663,670,1280,1130,111,816,1534,1370,1341,1608,110,1241,1449,37,560,1311,309,1591,1490,1549,1334,852,116,250,43,951,639,570,500,23,696,322,1045,611,1928,1354,362,403,100,1544,228,689,1715,1338,1616,897,436,1621,798,1596,187,2105,1052,524,1145,987,849,19,1639,103,1826,1987,1576,857,1792,1922,1617,1170,1022,2113,1172,1215,901,1801,1883,1583,1313,379,1206,1439,721,145,1059,1366,1961,1719,554,1724,2048,1564,317,11,1589,816,137,1787,581,985,1605,1304,697,1613,2074,235,921,1111,1032,1095,2002,1582,2126,1473,632,1849,1973,171,1411,568,1908,112,1712,463,515,1697,1832,1431,1592,181,1140,1004,328,219,1873,1352,2,823,1136,2077,126,1005,2058,2028,1520,1624,1277,1461,423,1322,1871,45,1190,1015,819,13,700,1880,25,975,725,2011,18,1538,950,1529,1240,13,767,1003,1398,601,550,53,133,965,754,1248,1006,1359,664,1404,1652,1440,1442,978,328,1316,1926,1707,1385,1970,2121,2031,588,377,443,406,940,611,1173,2013,876,1358,303,1211,500,242,1078,1383,525,1287,1913,355,349,573,1784,72,1277,1550,1059,778,863,1931,755,1318,400,1884,749,854,244,1123,518,576,1419,1430,377,1922,1375,390,743,1209,719,1718,966,566,921,2100,357,1745,531,128,1354,1561,386,239,2048,1963,1789,472,467,374,255,981,996,1118,1398,95,1686,1845,46,1929,251,240,770,1424,2041,855,1766,1273,679,1793,986,812,1205,898,1658,1332,1288,1346,1219,384,1762,52,1701,916,1344,162,1873,777,208,1809,25,1080,907,1033,1317,1911,1620,638,1272,787,639,1955,1294,1230,1229,1247,1759,1982,1206,1896,827,177,636,724,1426,1945,2112,459,2072,1302,502,1074,2031,1251,1024,1530,611,2122,457,141,541,1437,1280,1385,1593,2042,523,238,90,695,1947,1870,2099,1343,1953,2089,1228,1210,2097,1664,796,201,1730,776,1399,756,1877,843,1837,639,1551,91,1164,410,788,253,1346,15,263,612,1691,1382,82,1881,1175,1101,798,1368,551,143,1586,1891,1562,1456,1066,608,1885,671,1239,584,301,1082,1135,1046,1906,1475,1934,473,1224,1642,1815,495,695,1492,479,767,874,1529,1331,1245,991,842,71,1622,1548,577,228,679,748,684,1591,1519,201,1518,1967,392,597,137,951,1081,1883,737,1935,1810,2080,97,1637,1985,421,426,1925,911,101,683,651,1299,1604,1319&#125;; //int[] num=&#123;6,1,2,7,9,3,4,5,10,8&#125;; SortUtils.quickSort(num, 0, num.length-1); System.out.println(Arrays.toString(num)); long endTime = System.currentTimeMillis(); //获取结束时间 System.out.println("程序运行时间：" + (endTime - startTime) + "ms"); //输出程序运行时间 &#125;&#125;class SortUtils&#123; public static void quickSort(int arry[],int left,int right) &#123; if(left&gt;=right) &#123;//当递归到left（初始值是0）都大于right（初始值是数组长度减一）时候，返回这个数组 return; &#125; // 【重大提醒：基准数的选取对算法的复杂度影响很大，这里采用三值取中法。随机数法看人品。最糟糕就是取第一个数为基准数。】具体见上面特别分析 int p=arry[left];//基准数，后面p等价于数组最左边的数 int i=left,j=right;//i是最左边的数的下标，j是最右边的数的下标 while(i!=j) &#123;//当i不等于j时候，循环下面的操作，也就是说 当i和j相等即相遇的时候，跳出来。 while(arry[j]&gt;=p&amp;&amp;i&lt;j) &#123;//当数组的第j个下标的数大于基准数时（i必须小于j） j--;//j减减 &#125; while(arry[i]&lt;=p&amp;&amp;i&lt;j) &#123;//当数组的第i个小标的数小于基准数时（i必须小于j） i++;//i加加 &#125; //经过上面的操作数组i和j的下标的数都已经各自大于基准数和小于基准数 if(i&lt;j) &#123; //这个时候，就要交换这两个下标的数 int temp=arry[i];//交换两个数 arry[i]=arry[j]; arry[j]=temp; &#125; &#125; //实质是以6位基准数的最后一次交换数字，之后以这个基准数的左边和右边分别递归。 arry[left]=arry[i];//交换基准数1 arry[i]=p;//交换基准数2 quickSort(arry, left, i-1);//选择这个数组原来的基准数的左边进行递归。 quickSort(arry, i+1, right);//选择这个数组原来的基准数的右边进行递归。 &#125;&#125; C语言版快速排序1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;//int a[10]=&#123;6,1,2,9,7,4,5,10,8&#125;;//1.首先全局变量定义一个数组int a[1000]=&#123;1244,1060,1826,1976,230,68,169,735,2089,1533,1914,186,1714,1764,1931,2089,1468,36,109,1518,1588,1068,648,153,1530,1231,584,1009,1685,97,138,1274,181,1706,186,1440,648,1346,415,1596,1593,2012,1125,1322,927,534,39,1051,821,1700,711,1783,401,704,1759,848,226,1668,1514,1630,1847,1029,53,1214,1316,1155,1194,665,1569,1063,1442,1388,1775,287,1949,1608,1172,430,118,255,866,1687,450,2135,203,1975,1951,62,743,808,1658,178,1855,1303,1953,626,814,872,1427,601,529,287,1706,2136,109,158,1989,260,436,1245,1984,302,1382,1437,2012,116,944,247,1377,590,1030,1236,710,880,214,1802,1996,602,1577,1012,1340,204,1519,194,237,862,1006,543,819,1830,1709,835,1902,1271,1744,1794,1061,1890,2050,1351,1892,901,199,1612,1091,891,74,584,545,1966,1645,1303,2075,1480,942,1572,462,1598,1263,217,920,1060,943,917,680,1805,1845,1582,222,522,354,4,1476,345,765,1194,388,1981,1058,1684,427,1320,561,493,1942,79,455,1818,429,677,496,1749,1605,1515,2116,290,1901,1553,1695,1305,245,937,1764,989,219,1408,1554,1816,1378,392,1553,1084,1173,382,1782,1180,2002,767,436,344,1924,1691,49,1670,1812,862,578,641,1497,1542,215,1018,969,617,1088,1529,241,2014,1599,1810,2040,463,1304,1223,1704,605,433,1029,1223,1414,808,207,1309,1199,1106,694,2058,1733,972,146,433,596,1198,382,771,497,1877,92,1043,1628,305,1427,1349,810,2004,992,287,1136,1404,1456,1212,1609,2135,613,1923,393,118,2132,497,1746,656,190,58,488,1303,1583,534,673,920,779,1644,1388,961,1966,856,1049,1683,176,919,1786,1818,1149,1471,588,1860,804,626,1909,815,1985,868,71,1535,284,962,1085,3,11,1325,1039,1717,542,877,384,110,166,486,690,1758,1754,790,121,1415,1851,853,1927,736,260,1279,1761,115,1066,2146,343,236,1129,182,1993,997,1441,1513,1531,894,1882,1675,1118,1018,906,1549,159,622,1608,229,808,2044,1951,330,1724,668,1547,1527,1123,163,1530,912,600,249,740,2122,2098,793,1861,1605,166,358,1807,1859,1588,408,1628,269,785,445,300,2060,564,1722,1339,1050,2066,1414,36,669,1875,431,268,528,939,938,1311,1816,1290,974,1676,1154,1862,115,1238,296,2004,1720,1720,1823,1088,1640,1824,1769,1392,138,646,176,1504,298,459,544,1711,1138,507,464,1555,1105,1045,1859,103,970,1426,1029,838,339,1009,777,1715,541,452,367,522,1549,714,1679,527,1680,1608,1375,104,1978,1246,1001,243,1167,1146,1484,165,906,1858,1913,1533,733,2141,1704,709,1938,1036,1023,1578,159,1088,1970,2022,1625,487,1057,1881,487,1231,2036,833,74,1146,2040,1442,473,62,511,922,1876,361,258,2124,1178,232,1378,992,1754,1043,1359,1112,1643,1508,1941,774,664,2047,663,670,1280,1130,111,816,1534,1370,1341,1608,110,1241,1449,37,560,1311,309,1591,1490,1549,1334,852,116,250,43,951,639,570,500,23,696,322,1045,611,1928,1354,362,403,100,1544,228,689,1715,1338,1616,897,436,1621,798,1596,187,2105,1052,524,1145,987,849,19,1639,103,1826,1987,1576,857,1792,1922,1617,1170,1022,2113,1172,1215,901,1801,1883,1583,1313,379,1206,1439,721,145,1059,1366,1961,1719,554,1724,2048,1564,317,11,1589,816,137,1787,581,985,1605,1304,697,1613,2074,235,921,1111,1032,1095,2002,1582,2126,1473,632,1849,1973,171,1411,568,1908,112,1712,463,515,1697,1832,1431,1592,181,1140,1004,328,219,1873,1352,2,823,1136,2077,126,1005,2058,2028,1520,1624,1277,1461,423,1322,1871,45,1190,1015,819,13,700,1880,25,975,725,2011,18,1538,950,1529,1240,13,767,1003,1398,601,550,53,133,965,754,1248,1006,1359,664,1404,1652,1440,1442,978,328,1316,1926,1707,1385,1970,2121,2031,588,377,443,406,940,611,1173,2013,876,1358,303,1211,500,242,1078,1383,525,1287,1913,355,349,573,1784,72,1277,1550,1059,778,863,1931,755,1318,400,1884,749,854,244,1123,518,576,1419,1430,377,1922,1375,390,743,1209,719,1718,966,566,921,2100,357,1745,531,128,1354,1561,386,239,2048,1963,1789,472,467,374,255,981,996,1118,1398,95,1686,1845,46,1929,251,240,770,1424,2041,855,1766,1273,679,1793,986,812,1205,898,1658,1332,1288,1346,1219,384,1762,52,1701,916,1344,162,1873,777,208,1809,25,1080,907,1033,1317,1911,1620,638,1272,787,639,1955,1294,1230,1229,1247,1759,1982,1206,1896,827,177,636,724,1426,1945,2112,459,2072,1302,502,1074,2031,1251,1024,1530,611,2122,457,141,541,1437,1280,1385,1593,2042,523,238,90,695,1947,1870,2099,1343,1953,2089,1228,1210,2097,1664,796,201,1730,776,1399,756,1877,843,1837,639,1551,91,1164,410,788,253,1346,15,263,612,1691,1382,82,1881,1175,1101,798,1368,551,143,1586,1891,1562,1456,1066,608,1885,671,1239,584,301,1082,1135,1046,1906,1475,1934,473,1224,1642,1815,495,695,1492,479,767,874,1529,1331,1245,991,842,71,1622,1548,577,228,679,748,684,1591,1519,201,1518,1967,392,597,137,951,1081,1883,737,1935,1810,2080,97,1637,1985,421,426,1925,911,101,683,651,1299,1604,1319&#125;;//2.快排函数的三个实参是待快排的数组，//该数组的最左边的下标，该数组最右边的下标。void quickSort(int *arr,int left,int right)&#123; //3.定义i为左哨兵,j为右哨兵,p为基准兵(当前数组的基准兵为当前数组的左哨兵下标的值)看下图示 //6,1,2,9,7,4,5,10,8 //基准哨兵:p //左右哨兵:i j int i=left,j=right,p=arr[left]; //4.左下标大于等于右下标也就是快排排好的时候 if(left&gt;=right)&#123; return; &#125; while(i != j)&#123; while(arr[j]&gt;=p&amp;&amp;i&lt;j)&#123; j--; &#125; while(arr[i]&lt;=p&amp;&amp;i&lt;j)&#123; i++; &#125; if(i&lt;j)&#123; int temp ; temp =arr[i]; arr[i] =arr[j]; arr[j] =temp; &#125; &#125; arr[left] =arr[i]; arr[i] = p; quickSort(arr,left,i-1); quickSort(arr,i+1,right); &#125;int main()//1.写主函数&#123; int i; quickSort(a,0,999);//调用快排函数 for (i=0;i&lt;1000;i++)&#123; printf("%d\n",a[i]);//输出结果，codeblock先ctrl+F11编译，再ctrl+F10运行； &#125; return 0;&#125; 快速排序推荐阅读博客：http://developer.51cto.com/art/201403/430986.htm https://blog.csdn.net/liuyi1207164339/article/details/50827608 https://www.cnblogs.com/surgewong/p/3381438.html http://www.cnblogs.com/foreverking/articles/2234225.html https://www.cnblogs.com/y3w3l/p/6444837.html https://blog.csdn.net/liuzhenya1994/article/details/80254958]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>面试</tag>
        <tag>java</tag>
        <tag>排序</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[java面试题之约瑟夫环问题求解策略《四》]]></title>
    <url>%2F2018%2F08%2F30%2Fjava%E9%9D%A2%E8%AF%95%E9%A2%98%E4%B9%8B%E7%BA%A6%E7%91%9F%E5%A4%AB%E7%8E%AF%E9%97%AE%E9%A2%98%E6%B1%82%E8%A7%A3%E7%AD%96%E7%95%A5%E5%9B%9B%2F</url>
    <content type="text"><![CDATA[123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293import java.util.ArrayList;/** * 约瑟夫环 问题 * 获取幸运数字 * 思路： * ①集合数组的 * ②递归 */public class josephRing03 &#123; public static void main(String[] args)&#123; System.out.println("第一种方法：集合法"); System.out.println(getLuckNum01(10)); System.out.println("第二种方法：递归法"); System.out.println(getLuckNum02(10,3,8)); System.out.println(getLuckNum02(9,3,7)); System.out.println(getLuckNum02(8,3,6)); System.out.println(getLuckNum02(7,3,5)); System.out.println(getLuckNum02(6,3,4)); System.out.println(getLuckNum02(5,3,3)); System.out.println(getLuckNum02(4,3,2)); System.out.println("第三种方法：公式法");//本质也是递归 System.out.println(getlive(10, 3)); System.out.println(getlive( 9, 3)); System.out.println(getlive( 8 , 3)); System.out.println("第三.001种方法：公式形象记忆法");//本质也是递归 System.out.println(getLuckNum(10, 3)); System.out.println(getLuckNum(9, 3)); System.out.println(getLuckNum(8, 3)); &#125; //①数组集合法 public static int getLuckNum01(int num) &#123; //1.定义一个集合，并且添加人进去，10环就add十个人进去，100人环就add100个人进去 ArrayList&lt;Integer&gt; list = new ArrayList&lt;&gt;(); for (int i = 1; i &lt;= num; i++) &#123; list.add(i); &#125; //2.定义一个指针，区别于下面的i，这个count是直接跟人头对接的，所以要从1开始。 int count = 1; //3.遍历所有元素，一直“杀死”人直到只剩下最后一个人即list.size()!=1时都要继续遍历 /* System.out.println(list.size());*/ for (int i=0;list.size()!=1;i++)&#123; //4.如果已经遍历到最后一个人了，则重新开始，i重新等于0,又一个新环来进行“杀人”游戏 //注：这里要设置判断条件为list.size(),而不是list.size()-1是有原因的 //因为i作为下标一直遍历增加，直到最后一个下标，都是可以杀人的， //也就是说还可以进行下面的if判断以及count++ //所以，直到i增加到list.size时，已经可以说是下标越界了 //此时就要使得要越界的这个i变成0，重新开始新的“i生”（人生~哈哈哈） if(i==list.size())&#123; i =0; &#125; //5.当指针的对3求余为0时，去除掉list的这个元素。 //注：由于少了一个数，后面的数会补上前来，下标不变的话，i又必须得-1，才能不会错过当前的人 if(count%3 == 0)&#123; list.remove(i--); &#125; //6.count继续累加 count++; &#125; return list.get(0); &#125; //②递归法（大神法） public static int getLuckNum02(int sum,int value,int n) &#123; if( n ==1)&#123; return (sum+value-1)%sum; &#125; else&#123; return (getLuckNum02(sum-1, value, n-1)+value)%sum; &#125; &#125; //3.公式法 public static int getlive(int n,int m)&#123; if(n == 1)&#123;return 1;&#125; return (getlive(n-1,m)+m-1)%n+1;//背下来就可以了 &#125; //3.01形象记忆公式法 public static int getLuckNum(int sumMan,int jiange)&#123; if(sumMan == 1) &#123; return 1; &#125; else&#123; return (getLuckNum(sumMan-1,jiange)+jiange-1)%sumMan+1;//背下来就可以了 &#125; &#125;&#125; 总结： ①直接背公式。 ②理解指针指向。]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>面试</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[java面试题之求长整数中所有0和尾数0的个数的策略《三》]]></title>
    <url>%2F2018%2F08%2F29%2Fjava%E9%9D%A2%E8%AF%95%E9%A2%98%E4%B9%8B%E6%B1%82%E9%95%BF%E6%95%B4%E6%95%B0%E4%B8%AD%E6%89%80%E6%9C%890%E5%92%8C%E5%B0%BE%E6%95%B00%E7%9A%84%E4%B8%AA%E6%95%B0%E7%9A%84%E7%AD%96%E7%95%A5%E4%B8%89%2F</url>
    <content type="text"><![CDATA[/** 求出：1000的阶乘所有零和尾部零的个数，不用阶乘。 */12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061import java.math.BigInteger;public class test1000For002 &#123; public static void main(String[] args)&#123; //错误方案： //demo01();1000阶乘远大于long的类型范围,行不通。 //正确方案： //calculateTheNumOfZeroTest01(); 求出这个大数字中所有0的个数 //calculateThelastZeroNum02(); 求出这个大数字中尾部0的个数 &#125; public static void calculateThelastZeroNum02() &#123; BigInteger b1 =new BigInteger("1"); for (int i=1 ;i&lt;=1000;i++)&#123; BigInteger b2 = new BigInteger(i+""); b1 = b1.multiply(b2); &#125; String string2 =b1.toString(); StringBuilder sb2 = new StringBuilder(string2); string2 =sb2.reverse().toString();//链式编程，反转字符串再赋值 int count2=0; for (int i = 0; i &lt;string2.length() ; i++) &#123; if('0'==string2.charAt(i))&#123; count2++; &#125; else &#123; break; &#125; &#125; System.out.println(count2);//249 &#125; public static void calculateTheNumOfZeroTest01() &#123; BigInteger b1 =new BigInteger("1"); for (int i=1 ;i&lt;=1000;i++)&#123; BigInteger b2 = new BigInteger(i+""); b1 = b1.multiply(b2); &#125; // System.out.println(b1); String string =b1.toString(); int count=0; /* char[] arr =string.toCharArray();*/ for (int i = 0; i &lt;string.length() ; i++) &#123; if('0' == string.charAt(i))&#123; count++; &#125; &#125; System.out.println(count); &#125; public static void demo01() &#123; long num =1; for(long i=1; i &lt;= 1000;i++)&#123; num =i * num; &#125; System.out.println(num); &#125;&#125; 总结：①当需求的数的个数超过int和long的类型的最大长度时，即2^32-1这个值时，可以利用java自带的类库BigInterger对数字进行字符串化并且利用类的方法进行求值。②考虑到求尾数0的个数，当看到求【尾数类】的题目时，要想到String中没有直接倒过来的方法，要把String放入StringBulidedr中，再利用StringBulider的方法对其进行反转，思路就开了。③链式编程了解一下emmm。]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>面试</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[java面试题之斐波那契数列题型两种解题策略《二》]]></title>
    <url>%2F2018%2F08%2F28%2Fjava%E9%9D%A2%E8%AF%95%E9%A2%98%E4%B9%8B%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97%E9%A2%98%E5%9E%8B%E4%B8%A4%E7%A7%8D%E8%A7%A3%E9%A2%98%E7%AD%96%E7%95%A5%E4%BA%8C%2F</url>
    <content type="text"><![CDATA[/**不死神兔 月月生问题 假设一对刚出生的小兔一个月后会长成大兔，再过一个月就会生下一对小兔，并且此后每个月都会生下一对兔子 问：一对刚出生的兔子，一年内可以繁殖成多少对兔子 两种解题思路： ①利用数组 ②递归计算 */ 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849/* *不死神兔 月月生问题 * 假设一对刚出生的小兔一个月后会长成大兔，再过一个月就会生下一对小兔，并且此后每个月都会生下一对兔子 * 问：一对刚出生的兔子，一年内可以繁殖成多少对兔子 * 两种解题思路： * ①利用数组 * ②递归计算 */public class rabbitTest01 &#123; public static void main(String[] args)&#123; // ①利用数组(7行代码搞定) getRabbitNum01(); //②递归计算(2行代码搞定) //1.定义一个数组，数组大小意味着第几个月的兔子数量 int numRabbit =12; int[] arr =new int[numRabbit]; //2.利用递归输出,核心是:fun(num) =fun(num-2)+fun(num-1); for (int i = 0; i &lt;arr.length ; i++) &#123; System.out.println("第"+(i+1)+"个月的兔子数量是"+getNum(i+1)+"只"); &#125; &#125; public static int getNum(int i)&#123;//利用三元运算符使代码更简洁 return (i ==1||i ==2) ? 1 :(getNum(i-2)+getNum(i-1)); &#125;/*下面小测试的答案在这里：第10个月————21对大兔子生下21对小兔子————————13对小兔子长成13对大兔子 ——共55对（42+13）你做对了么?对了就请点个喜欢吧~~~*/ public static void getRabbitNum01() &#123; //1.定义一个数组，数组大小意味着第几个月的兔子数量 int numRabbit =12; int[] arr =new int[numRabbit]; //2.初始化第一和第二个元素为1 arr[0]=arr[1]=1; //3.遍历一下这个数组，也就是让每个月都有个兔子总数值 for (int i = 2; i &lt;arr.length ; i++) &#123; arr[i] = arr[i-2] +arr[i-1]; &#125; //4.选择输出每个月份的兔子总数，直观清晰 for (int i = 0; i &lt;arr.length ; i++) &#123; System.out.println("第"+(i+1)+"个月的兔子数量是"+arr[i]+"只"); &#125; &#125;&#125; 总结：规律掌握如下，一点点理解，这个不会太难。月份——————兔子生长情况——————兔子当月总对数第1个月————1对小兔子———————— 共1对第2个月————1对大兔子———————— 共1对第3个月————1对大兔子生下1对小兔子——共2对（1+1）第4个月————1对大兔子生下1对小兔子————————1对小兔子长成1对大兔子 ——共3对（1+2）第5个月————2对大兔子生下2对小兔子————————1对小兔子长成1对大兔子 ——共5对（2+3）第6个月————3对大兔子生下3对小兔子————————2对小兔子长成2对大兔子 ——共8对（6+2）第7个月————5对大兔子生下5对小兔子————————3对小兔子长成3对大兔子 ——共13对（10+3）第8个月————8对大兔子生下8对小兔子————————5对小兔子长成5对大兔子 ——共21对（16+5）第9个月————13对大兔子生下13对小兔子————————8对小兔子长成8对大兔子 ——共34对（26+8）小测试：看你懂了没？第10个月————？对大兔子生下？对小兔子————————？对小兔子长成？对大兔子 ——共？对（？+？）答案藏在本篇文章中，聪明人10秒钟内应该能看到。或者，自己把代码敲一遍，结果自然明白。]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>面试</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[java面试题之二分查找题型的解题策略《一》]]></title>
    <url>%2F2018%2F08%2F27%2Fjava%E9%9D%A2%E8%AF%95%E9%A2%98%E4%B9%8B%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E9%A2%98%E5%9E%8B%E7%9A%84%E8%A7%A3%E9%A2%98%E7%AD%96%E7%95%A5%E4%B8%80%2F</url>
    <content type="text"><![CDATA[/* 二分查找： 查找元素对应的索引 前提：数组有序，这点特别重要！！！要求的数组一定要按照顺序来的。 */12345678910111213141516171819202122232425262728293031323334353637383940414243444546package day13.searchAlgorithm;public class binarySearch &#123; public static void main(String[] args)&#123; int[] arr = &#123;11,22, 33, 44, 55&#125;; System.out.println(binarysearch(arr,11)); System.out.println(binarysearch(arr,22)); System.out.println(binarysearch(arr,33)); System.out.println(binarysearch(arr,44)); System.out.println(binarysearch(arr,55)); System.out.println(binarysearch(arr,66)); System.out.println(binarysearch(arr,77)); &#125; private static boolean binarysearch(int[] arr, int num) &#123; /** * 二分查找3点 * 1.确定 小中大 3个索引 * 2.判断 中索引 的值是否等于 待查值，等于即返回true，不等于进入while循环 * 3.判断 值的索引与中的索引的大小， 中大就大索引改为中大索引-1， 中小就小索引改为中大索引+1， 中大索引本身改为大小索引之和的一半 * 4.当小索引大于大索引时返回false */ int max = arr.length - 1; int min = 0; int mid = (max + min) / 2; Boolean flag; while (arr[mid]!=num) &#123; //当中间值 mid = (max + min) / 2; if (arr[mid] &gt; num) &#123; max = mid - 1; &#125; else if (arr[mid] &lt; num) &#123; min = mid + 1; &#125; if(min&gt;max)&#123; return false; &#125; &#125; return true; &#125;&#125; 总结：二分查找关键在于数组中数字要有序，其次是确定好三个索引的大小关系。]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>面试</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[16分钟教你搭建一个Hexo博客>]]></title>
    <url>%2F2018%2F08%2F10%2FHexo%E6%90%AD%E5%BB%BAnext%E4%B8%BB%E9%A2%98%E5%8D%9A%E5%AE%A2%E5%8F%82%E8%80%83001%2F</url>
    <content type="text"><![CDATA[目的：搭建一个hexo.next主题的博客 用时：大约要16分钟左右 条件：①一个git-bash命令行窗口②一个npm打包工具③一个node.js运行环境④一个gitHub账号]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>nexT</tag>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[铭戈栈]]></title>
    <url>%2F2018%2F08%2F06%2F%E9%93%AD%E6%88%88%E6%A0%88%2F</url>
    <content type="text"><![CDATA[MarkDown基本语法：①标题大小 铭戈栈的第一篇博客markDown语法###②大小列表 java a IDE的选择 b 数据类型 c 数组 d 类文件 .class和.java的区别 e String类的使用 c++ 算法 ③引用外链第一种java博客学习对象第二种（优先）java博客学习对象 ##改字体④斜体字/这个字好像是斜体的！！/⑤删除字这是加删除线的文字⑥加粗这是加粗的文字⑦斜体加粗这是斜体加粗的文字 ##插入东西 三个横线： ##引用图片： ##代码区：1234567&lt;html&gt; &lt;title&gt; 我是标题 &lt;/title&gt; &lt;body&gt; &lt;/body&gt;&lt;/html&gt; ##引用区 第一个引用 第二个引用]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>导航</tag>
        <tag>目录</tag>
        <tag>个人简介</tag>
      </tags>
  </entry>
</search>
